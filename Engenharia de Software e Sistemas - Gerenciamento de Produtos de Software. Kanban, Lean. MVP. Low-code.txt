Capítulo. Engenharia de Software e Sistemas - Gerenciamento de Produtos de Software. Kanban, Lean. MVP. Low-code.


Índice

1) Metodologias Ágeis.

2) Metodologias Ágeis - Agilidade x Velocidade

3) Metodologias Ágeis - Princípios Ágeis.

4) Metodologias Ágeis - Método Ágil x MétodoLean

5) Resumo - Metodologias Ágeis.

6) Questões Comentadas - Metodologias Ágeis - CESPE

7) Questões Comentadas - Metodologias Ágeis - FCC

8) Questões Comentadas - Metodologias Ágeis - FGV

9) Questões Comentadas - Metodologias Ágeis - Diversas.

10) Lista de Questões -Metodologias Ágeis - CESPE

11) Lista de Questões -Metodologias Ágeis - FCC

12) Lista de Questões -Metodologias Ágeis - FGV

13) Lista de Questões -Metodologias Ágeis - Diversas.

14) Kanban

15) Questões Comentadas -Kanban- Multibancas.

16) Lista de Questões - Kanban- Multibancas.

17) MVP

18) Low-No-Code - Teoria


APRESENTAçÃo

O assunto da aula de hoje é: Metodologias Ágeis! Vamos ver agora um novo paradigma de
desenvolvimento de software bem interessante, muda bastante coisa em relação às
metodologias
tradicionais - é bem mais moderno. Esse é um assunto que sempre corre o risco de
cair ao menos
uma questãozinha na prova porque é o paradigma de desenvolvimento mais utilizado
atualmente.
Então, venham na fé que vocês vão gostar:)

PROFESSOR DIEGO CARVALHO - WWW.INSTAGRAM.COM/PROFESSORDIEGOCARVALHO

Galera, todos os tópicos da aula possuem Faixas de Incidência, que indicam se o
assunto cai
muito ou pouco em prova. Diego, se cai pouco para que colocar em aula? Cair pouco
não significa
que não cairá justamente na sua prova! A ideia aqui é: se você está com pouco tempo
e precisa ver
somente aquilo que cai mais, você pode filtrar pelas incidências média, alta e
altíssima; se você tem
tempo sobrando e quer vertudo, vejam também as incidências baixas e baixíssimas. Fechado?

Além disso, essas faixas não são por banca - é baseado tanto na quantidade de vezes que caiu em
prova independentemente da banca e também em minhas avaliações sobre cada assunto...


#ATENÇÃO

Avisos
Importantes

O curso abrange todos os níveis de conhecimento...

Esse curso foi desenvolvido para ser acessível a alunos com diversos níveis de
conhecimento diferentes. Temos alunos mais avançados que têm
conhecimento prévio ou têm facilidade com o assunto. Por outro lado, temos
alunos iniciantes, que nunca tiveram contato com a matéria ou até mesmo que
têm trauma dessa disciplina. A ideia aqui é tentar atingir ambos os públicos -

iniciantes e avançados - da melhor maneira possível..

Por que estou enfatizando isso?

O material completo é composto de muitas histórias, exemplos, metáforas, piadas, memes, questões,
desafios, esquemas, diagramas, imagens, entre outros. Já o material simplificado possui exatamente o
mesmo núcleo do material completo, mas ele é menor e bem mais objetivo. Professor, eu devo estudar
por
qual material? Se você quiser se aprofundar nos assuntos ou tem dificuldade com a matéria,
necessitando
de um material mais passo-a-passo, utilize o material completo. Se você não quer se aprofundar nos
assuntos ou tem facilidade com a matéria, necessitando de um material mais direto ao ponto, utilize
o
material simplificado.

Por fim...

O curso contém diversas questões espalhadas em meio à teoria. Essas
questões possuem um comentário mais simplificado porque têm o único
objetivo de apresentar ao aluno como bancas de concurso cobram o
assunto previamente administrado. A imensa maioria das questões para
que o aluno avalie seus conhecimentos sobre a matéria estão dispostas ao
final da aula na lista de exercícios e possuem comentários bem mais

completos, abrangentes e direcionados.


QQ

VIHVw. estra tegiaconcursos. com. br


Conceitos Básicos

METoDoLoGIAS ÁGEIS

INCIDÊNCIA EM PROVA: ALTA

Em meados de 2001, 17 especialistas proeminentes da área de desenvolvimento de software
se
reuniram em um resort em Utah (foto acima) para conversar, esquiar, discutir e
encontrar um
terreno comum para suas ideias sobre métodos de desenvolvimento de software. Essa galera
pegou uma mesa, se sentaram, tomaram umas cervejas e começaram a desabafar sobre
seus
projetos de desenvolvimento de software que estavam falhando por diversos motivos.

Os 17 Engenheiros de Software

Foi quando um deles levantou a mão e disse que usou o Modelo em Cascata e o projeto estourou
o orçamento; o outro disse que isso também já aconteceu com ele, mas recentemente um
projeto
falhou porque estourou o prazo; aí outro se compadeceu e disse que os
projetos dele viviam
falhando porque ele não conseguia construir todo o escopo que foi pedido
pelos usuários do
sistema. E assim foi...

Eles foram compartilhando suas experiências ruins com o uso das metodologias
tradicionais,
mas depois cada um desses caras foi dizendo: "para remediar isso, agora eu uso iterações"; aí o
outro
disse que não usa mais tanta documentação como antigamente; aí o outro levantou a mão
e falou
que não faz mais tanto planejamento; e assim por diante. Então, no decorrer da
reunião, foi sendo
criado um consenso entre os participantes.


Foi aí que alguns acharam que era o momento de formalizar e elevar aquela reunião em
um patamar
maior. Eles decidiram escrever um documento que serviria de grito de guerra
contra os
processos tradicionais de desenvolvimento de software que vigoravam naquela época. Para
isso, eles pensaram: "Nós precisamos de um nome que expresse bem o significado dessa reunião e
das
nossas ideias comuns".

Na discussão, eles decidiram que a palavra "leve" não expressava tão bem o que eles
queriam dizer
e decidiram trocar pela palavra "ágil", que captava melhor a abordagem que
eles estavam
propondo. Em um segundo momento, eles começaram a escrever um documento bem pequeno,
bem objetivo, bem claro e que conteria as crenças, valores e princípios daqueles
dezessete
engenheiros de software.

Foi então que surgiu o documento chamado Manifesto Ágil Para Desenvolvimento De
Software,
que definia bem o que era ágil, o que não era ágil e o que essas pessoas defendiam. Além disso, eles
passaram a se autodenominar como Aliança Ágil, que era um grupo de pensadores
independentes
sobre desenvolvimento de software e muitas vezes concorrentes entre si, mas que
concordaram
em um documento chamado Manifesto Ágil.

Isso se tornou uma organização sem fins lucrativos que procura promover
conhecimento e
discussões sobre os vários métodos ágeis que existem hoje em dia. A partir daí,
galera... esses caras

- que eram os líderes do movimento ágil - começaram a escrever artigos,
fazer palestras e
disseminar esse novo paradigma. Como vocês sabem, esse negócio explodiu e hoje a imensa
maioria dos projetos de software são feitos utilizando metodologias ágeis.

Bem, para aqueles que não conhecem, nós trazemos a seguir a imagem original
do próprio
Manifesto Ágil com seus fundamentos. Vejamos...

Manifesto para Desenvolvimento Ágil de Software

Estamos descobrindo maneiras melhores de desenvolver
software, fazendo-o nós mesmos e ajudando outros a

fazerem o mesmo. Através deste trabalho, passamos a valorizar:

Indivíduos C interações mais que processos e ferramentas
Software em funcionamento mais que documentação abrangente
Colaboração com O cliente mais que negociação de contratos
Respondei* a mudanças mais que seguir um plano

Ou seja, mesmo havendo valor nos itens à direita,
valorizamos mais os itens à esquerda.

Notem que a coluna da esquerda representa os anseios das metodologias ágeis, enquanto
a coluna
da direita representa o que as metodologias tradicionais costumavam executar. Agora prestem


atenção: o manifesto ágil afirma que, mesmo havendo valor nos itens à direita,
valorizam-se
mais os itens à esquerda. Uma pegadinha comum de prova é dizer que os métodos ágeis
não
possuem documentação. Isso está correto?

Não, isso evidentemente está errado! O manifesto ágil preconiza que se valorize mais
software em
funcionamento do que documentação abrangente, logo isso não significa
que não tenha
documentação. E isso serve para os outros três fundamentos, isto é, os itens da
direita tem o
seu valor, por outro lado se valoriza mais os itens da esquerda. Tudo certo até aqui? Agora vamos
detalhar um pouco mais...

POR QUE VALORIZAR MAIS INDIVÍDUOS E SUAS INTERAÇÕES 00 QUE PROCESSOS E FERRAMENTAS?

Porque, em última instância, quem gera produtos e serviços são os indivíduos, que
possuem
características únicas como talento e habilidade. Pessoal, programar é uma atividade
humana e,
como tal, depende de questões humanas para que obtenha sucesso. Jim
Highsmith, um dos
signatários do manifesto ágil, afirma que as habilidades, as personalidades e as
peculiaridades de
cada indivíduo são críticas para o sucesso dos projetos.

Ele diztambém que pessoas muitas vezes são desorganizadas e difíceis de entender,
poroutro lado
elas também são inovadoras, criativas, apaixonadas, entre outros. E quanto às
ferramentas e aos
processos, professor? Galera, ambos são importantíssimos para guiar
e apoiar o
desenvolvimento, mas é a capacidade e o conhecimento dos indivíduos que ajudam a tomar
decisões críticas no projeto.

Dessaforma, basta eu ensinar um conjunto de processos para a minha equipe, assim como um conjunto
de ferramentas para garantir que a equipe criará bons softwares? Claro que não! Uma
equipe possui
características intrínsecas à personalidade, habilidades e capacidades de cada um dos
seus
integrantes e isso deve ser considerado e valorizado na construção de um software.
Entendido,
pessoal? Seguindo...

POR QUE VALORIZAR MAIS SOFTWARE EM FUNCIONAMENTO DO QUE DOCUMENTAÇÃO ABRANGENTE?

Porque o que gera valor para o cliente é o resultado que você entrega e, não, a
documentação
em si. Respondam-me uma pergunta: quando você compra um carro, você olha o motor, o
design, o
painel, o interior ou você sai correndo loucamente para ler o manual do carro e outras
documentações?
Imagino que vocês tenham respondido a primeira opção! Dito isso, concluímos que o
software em
funcionamento é o único indicador do que, de fato, a equipe construiu.

Claro, não se exclui a necessidade de documentação, que é bastante útil para o
desenvolvimento,
mas é recomendável produzir somente a documentação necessária e suficiente para a
realização
do trabalho em si. Nada de burocratizar demais e construir trezentas páginas de
documentação
com quatrocentos diagramas diferentes para representar o software. Tudo certo? Eu vou
repetir,
porque esse assunto cai bastante em prova!


No ágil, documentação é descartável? Não, ela é útil para ajudar a comunicação e a
colaboração dos
integrantes da equipe, além de melhorar a transferência de conhecimento, preservar
informações
históricas, satisfazer necessidades contratuais ou legais, entre outros. A
documentação é
importante, sim; mas valoriza-se mais o software em funcionamento, que é o que de fato
agrega valor ao cliente. Belê?

POR QUE VALORIZAR MAIS COLABORAÇÃO COM 0 CLIENTE DO QUE NEGOCIAÇÃO DE CONTRATOS?

Porque é importante o envolvimento contínuo do cliente! Aliás, desenvolvedores
e clientes
devem estar sempre lado a lado, visto que ambos possuem interesses em
comum. Qual? Um
software que agregue valor! No Modelo em Cascata, vocês devem se lembrar que o
cliente até
colaborava com a equipe no início do projeto (em geral, na fase de levantamento de
requisitos),
mas - depois disso-o cliente saía de cena e só aparecia novamente para ver o software já pronto.

E pior: muitas vezes, o cliente saía insatisfeito, porque o resultado não era o que
ele esperava.
Dessa forma, o manifesto ágil afirma que você tem que valorizar mais a sua relação
com o cliente
do que ficar discutindo itens de contrato: "Isso não estava previsto no contrato";
"Isso não estava
combinado previamente"; "Vou cobrara mais porque você mudou tal coisa"; entre outros.
Professor,
então contratos não são importantes? Claro que são!

Contratos regulam essa relação entre cliente e fornecedor, mas não se deve ser
excessivamente
rigoroso, porque isso pode acabar com a relação com seu cliente. Por falar em
contrato, existem
várias maneiras de fazer contratos de desenvolvimento ágil. Uma maneira comum é fixar
o tempo
e deixar o escopo variar. É o famoso: "Tempo Fixo e Escopo Variável"'. Você fala para o seu cliente:
"É o seguinte: eu faço tudo que você pedir desde que seja possível fazer no prazo tal".

POR QUE VALORIZAR MAIS A RESPOSTA A MUDANÇAS DO QUE SEGUIR UM PLANEJAMENTO ESPECÍFICO?

Porque, em geral, é necessário obter respostas rápidas a mudanças e
seguir um
desenvolvimento contínuo do software. Todo projeto deve balancear o planejamento
com a
mudança, dependendo do nível de incerteza do projeto. Manter-se preso a um
planejamento
ultrapassado pode ser nocivo ao andamento do projeto. Galera, nós estamos no século
21! Uma
empresa líder de mercado pode acabar de uma hora para outra - nós vemos isso o tempo todo.

Cadê 0 Orkut? Cadê 0 MSN?Cadê a Nokia? Cadê a Kodak? Cadê a BlockBuster?Todas essas empresas
foram gigantes pouco tempo atrás e simplesmente morreram! Logo, a única certeza que
você tem
em um projeto é a instabilidade! Logo, a equipe deve estar preparada para mudanças no
escopo,
tempo, custo, tecnologia, arquitetura, no paradigma de programação, regulamentações, leis,
regras de conformidade, entre outros.

Não tem como fazer um planejando e achar que ele vai ficar fixo ali ao longo do
tempo - isso é
pensamento do século passado (se muito!). Acreditem: mudanças vão ocorrer! Planejar é bom


demais. É tão bom que é recomendável refazer o planejamento a todo momento, de forma
contínua e, não, fazer um planejamento estático e simplesmente segui-lo com
todo rigor
ignorando mudanças externas que venham a ocorrer. Fechou?


Agilidade x Velocidade

INCIDÊNCIA EM PROVA: BAIXA

Pessoal, agora vamos falar rapidamente sobre uma diferença
importante! Vocês sabem qual a diferença entre agilidade e
velocidade? Antes de explicá-la no contexto de desenvolvimento de
software, eu vou explicar como uma metáfora em outros dois
contextos para facilitar o entendimento. Vamos pensar no atleta
Usain Bolt! O Usain Bolt é um cara veloz ou um cara ágil? Bem, em
comparação com seres humanos normais, ele é mais ágil e mais
veloz que todo mundo! No entanto, vamos pensar só no grupo dos
grandes atletas que disputam mundiais e olimpíadas de atletismo.
Nesse contexto, ele é absurdamente veloz, mas menos ágil que a
maioria dos seus concorrentes. Como é, professor?

Vejam as duas imagens a seguir: observem que - à esquerda - temos cerca de vinte
metros de
corrida e o Bolt é o atleta de azul no meio. Notem também que ele está mais ou
menos em quarto
lugar na corrida. Por que? Porque agilidade é a capacidade de reagir
ou responder
adequadamente a mudanças e o Bolt sempre teve problemas de largada, uma vez que ele é
mais alto e pesado que os outros.

Logo, ele acaba reagindo de forma mais lenta que seus adversários quando o tiro de
início da
corrida é disparado. Vejam: todos estão parados e, ao disparar o tiro, nós temos uma
mudança.
Essa mudança faz com que o os atletas reajam e saiam da inércia. O Bolt demora mais
que seus
concorrentes a sair da inércia, uma vez que ele não responde tão bem quanto os
outros a mudança.
Nesse sentido, ele é ágil, mas não destoa dos outros pela sua agilidade.

Se nós tivéssemos corridas de 50 metros em vez de 100 metros, talvez ele não fosse
tricampeão
olímpico. Por outro lado, vejam o final da corrida quando ele não tem mais que
reagir a mudanças,
ele só tem que correr até o fim dos 100 metros. Ele termina muito distante do segundo lugar! Por


que? Porque ele é um cara extremamente veloz, logo ele destoa de todos os outros com
muita
facilidade. Entenderam que agilidade não é velocidade? É a capacidade de reagir a mudanças!

A velocidade trata de quão rápido é possível entregar um software para o cliente. E,
para isso,
nós temos outras metodologias de desenvolvimento (Ex: Rapid Application Development (RAD)
é
capaz de desenvolver softwares em poucos meses). Utilizando outra metáfora, isso ocorre
também
quando você tem uma disputa entre um carro muito potente e pesado, e um carro menos
potente
e mais leve.

É provável que o carro mais leve, mesmo sendo menos potente, tenha uma arrancada
melhor
que o carro mais potente, logo ele é mais ágil. Ele é mais rápido? Não, o carro mais potente é mais
rápido, mas ele é mais potente! Claro, pessoal, que esses são exemplos genéricos -
apenas para
entender a ideia. Diego, e como esse conceito de agilidade pode ser utilizado no
contexto de um
desenvolvimento de software?

No contexto de projetos de software, podemos imaginar: eu estou gerenciando meu projeto
de um
novo sistema e, de repente, descubro que vou ter que mudar a arquitetura do software
- não tem
problema; se eu descubro que, por conta de cortes de gastos, eu terei que reduzir o
tamanho a
minha equipe-nãotem problema; se eutiverquetrocaratecnologia utilizada porque ela
se tornou
defasada - mais uma vez, não tem problema.

Pressman afirma que a agilidade pode ser aplicada a qualquer processo de
software. No
entanto, para obtê-la, é essencial que o processo de software seja projetado para que
a equipe
possa adaptar e racionalizar suas tarefas; para que a equipe possa conduzir
o planejamento
compreendendo a fluidez de uma abordagem do desenvolvimento ágil; e para que a equipe
possa
eliminar tudo, exceto os artefatos essenciais do processo.

Além disso, deve enfatizar a estratégia de entrega incremental, entregando para
o cliente o
software operacional o mais rapidamente possível para o tipo de produto e ambiente
operacional.
Essa são as diretivas para que um processo de software qualquer possa ser, também,
ágil.
Métodos ágeis são ágeis porque partem do princípio de que tem que responder
adequadamente a
mudanças que venham a ocorrer durante o ciclo de vida do projeto.

Eles são mais dinâmicos, adaptativos, interativos e colaborativos - eles se
adaptam às
necessidades de um projeto e às suas mudanças no decorrer do desenvolvimento; os
métodos
tradicionais são mais preditivos/prescritivos, processuais, formais, documentais e
contratuais-eles
valorizam mais o planejamento de todos os aspectos do processo de desenvolvimento de
software
como um todo.


Princípios Ágeis

INCIDÊNCIA EM PROVA: ALTA

A seguir, nós vamos conhecer quais são os princípios do Manifesto Ágil. Eles vêm expressamente
no manifesto e vocês podem encontrá-lo no site oficial:

WWW.AGILEMANIFESTO.ORG

NÓS SEGUIMOS ESSES PRINCÍPIOS..

Nossa maior prioridade é satisfazer o cliente através da entrega contínua e adiantada
e software com valor
agregado.

Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento. Processos
ágeis tiram
vantagem das mudanças visando vantagem competitiva para o cliente.

Entregar frequentemente software funcionando, de poucas semanas a poucos meses, com preferência à
menor
escala de tempo.

Pessoas de negócio e desenvolvedores devem trabalhar diariamente em conjunto por todo o projeto.

Construa projetos em torno de indivíduos motivados. Dê a eles o ambiente e o suporte necessário e
confie neles
para fazer o trabalho.


O método mais eficiente e eficaz de transmitir informações para e entre uma equipe de
desenvolvimento é através
de conversa face a face.

Software funcionando é a medida primária de progresso.

Os processos ágeis promovem desenvolvimento sustentável. Os patrocinadores, desenvolvedores
e usuários
devem ser capazes de manter um ritmo constante indefinidamente.

Contínua atenção à excelência técnica e bom design aumenta a agilidade.
Simplicidade-a arte de maximizara quantidade de trabalho não realizado-é essencial.
As melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis.

Em intervalos regulares, a equipe reflete sobre como se tornar mais eficaz e então
refina e ajusta seu
comportamento de acordo.

Professor, metodologias ágeis são recomendadas para projetos de qualquer tamanho
e
complexidade? Segundo Sommerville: "Todos os métodos têm limites, e os métodos ágeis são
somente adequados para alguns tipos de desenvolvimento de sistema. Na minha opinião, eles são mais
adequados para o desenvolvimento de sistemas de pequenas e médias empresas e produtos
para
computadores pessoais".

Diego, você concorda com essa afirmação? Não, eu discordo! Acredito que ela já foi
válida tempos
atrás, mas hoje não é mais! Projetos Ágeis já são suficientemente maduros
para serem
aplicados a projetos complexos e de grande porte. Pessoal, essa é só a minha opinião!
Não é
possível saber ainda a posição das bancas caso isso seja questionado em provas de concurso. Legal?
Vamos ver agora exemplos de metodologias ágeis de desenvolvimento:

PRINCIPAIS METODOLOGIAS ÁGEIS

SCRUM CRYSTAL
XP

TDD ATDD
BDD

FDD DDD
MDD

DSDM ASD
KANBAN

LEAN AUP
AGILE MODELING
OSSD SCRUMBAN
BADM

Agora vamos ver algumas diferenças básicas entre metodologias de desenvolvimento
software
tradicionais e metodologias ágeis:

CRITÉRIO | MODELOS TRADICIONAIS
MODELOS ÁGEIS

Comumente realizado em detalhe para todo Planejamento de alto nível no início do
projeto e
o projeto em sua fase inicial. os detalhes são realizados durante o
projeto. Não


PLANEJAMENTO

é necessário possuir um planejamento detalhado
de todo o projeto. A restrição se dá apenas em
possuir os detalhes do trabalho para a próxima
iteração.


Pode exigir um grande esforço e equipe para
atuar com os riscos de todo o projeto.

Prioriza os riscos gerais do projeto, mas foca
principalmente nos riscos das próximas iterações,
atuando assim em um escopo bem reduzido. A
própria equipe atua com os riscos e pode obter
apoio externo.


EQUIPE

TEMPO DE
ENTREGA

ACEITAÇÃO DE
MUDANÇAS

PREVISIBILIDADE

RESULTADOS AO

APRESENTAÇÃO

DE
INFORMAÇÕES
DO PROJETO

Possui profissionais com papéis bem
definidos, quantificada e mobilizada
conforme o planejamento do projeto. A
equipe executa o projeto guiado pelo
Gerente de Projetos conforme o plano
estabelecido.

É realizado conforme o plano estabelecido e
pode durar semanas, meses ou até mesmo
anos.

Gerenciamento formal de mudanças, pois
exige alteração do planejamento já realizado
e geralmente precisa passar por aprovações
formais de um ou mais níveis hierárquicos.

Depende do intervalo de monitoramento e
controle do projeto. Quanto mais curto,
maior a chance de prever as ocorrências
futuras. Quanto maior o intervalo, menor a
chance de prever as ocorrências futuras.

Tende a demorar a dar resultados a curto
prazo, pois as entregas são geralmente
realizadas ao final do projeto. Melhores
resultados são apresentados em projetos de
maiorduração.

Geralmente de uma apresentação formal
previamente agendada com os stakeholders
em intervalos de tempo. As informações
podem ser detalhadas ou não conforme a
necessidade do público envolvido.

Conforme estabelecido no planejamento do
projeto. No caso de mudanças aprovadas,
varia conforme os impactos das solicitações
e podem ser traumáticas aos envolvidos
quanto às suas expectativas.

Equipe multidisciplinar, multifuncional e auto-
organizada. Ela decide como fazer e atua de
forma colaborativa.

Fixo e é conforme a definição de duração das
iterações que comumente varia entre 1 e 4
semanas.

Mudanças são bem-vindas. Evita-se mudar 0
escopo da iteração em andamento, mas 0 escopo
das futuras iterações podem ser replanejado
conforme a necessidade do cliente.

Tende a ter uma grande previsibilidade futura
devido à constante análise e feedback através das
oportunidades de inspeção e adaptação providas
pelo método.

Gera resultados a curto, médio e longo prazo, pois
atua com entregas antecipadas e de valor
agregado e contínuo ao cliente.

Geralmente informal e utiliza radiadores de
informação no ambiente de trabalho durante
todo 0 projeto, de modo que as informações do
projeto fiquem visíveis e transparentes a toda
equipe e envolvidos.

Conforme 0 tamanho da iteração e 0
planejamento das releases para as entregas
significativas.


Detalhada desde o início do projeto.

Nas fases iniciais e nas principais validações
do produto.

Geralmente em prazos longos através da
realização de reuniões após uma grande
etapa ou grande entrega do projeto.

Gerente de Projetos.

Claros e definidos.

Guiado conforme o planejamento do projeto
e nos processos estabelecidos no plano.

Melhor resultado em projetos com escopo
muito bem definido e orientado a
planejamento.

Abrangente no início e detalhada somente o
necessário durante o projeto conforme os
objetivos das iterações e releases.

Durante todo o projeto, o cliente faz parte da
equipe.

Em prazos curtos, sempre ao final das iterações.

Equipe do Projeto.

Conforme a confiança na equipe e ambiente
colaborativo.

Empírico e guiado ao produto e às pessoas.
Orientado à geração de valor e conforme
priorização dos riscos.

Melhor resultado em projetos cujo escopo é
dinâmico e construído durante a execução do
projeto.


Método Ágil x Método Lean

INCIDÊNCIA EM PROVA: BAIXA

Galera, muitas pessoas me perguntam se Método Ágil é idêntico ao Método Lean! Apesar
de serem
conceitos semelhantes, são diferentes! O Método Lean é uma filosofia de
gestão inspirada em
práticas e resultados do Sistema Toyota e se caracteriza por uma estrutura de
processos em que há
uma tentativa de minimizar o desperdício. O Lean serve de base para o Ágil. Ele
apresenta sete
princípios...

Os princípios são: (1) Eliminar desperdício: O que seria um desperdício,
professor? Trabalho
parcialmente feito (que você vai acabartendo que terminar em algum momento); processos
extras
(como documentação pesada); funcionalidades extras (entregue valor com qualidade
e ponto);
alternação de tarefas ou multitarefas (trocar de tarefa toda hora acumula desperdícios).
Acabou?
Não, tem mais...

Evitar esperas (ex: cliente não tem tempo de homologar); esforços de
comunicação (equipes
geograficamente distribuídas podem gerar problemas de gestão); defeitos (entregar
um software
cheio de bugs). Enfim... tudo isso é considerado desperdício. (2) Amplificar
conhecimento: trata-
se de priorizar a comunicação e o feedback contínuos entre equipes e
usuários durante o
desenvolvimento.

(3) Fortalecer o time: criar um ambiente onde a equipe trabalhe de forma
autoorganizada e
autodirigida, evitando microgerenciamento; (4) Entregas rápidas: maximizar o ROI
(Return Of
Investiment) do projeto, entregando software de valor de forma rápida e contínua; (5)
Construir
qualidade: garantir qualidade no desenvolvimento do software utilizando técnicas
como TDD,
Refatoração, etc.

(6) Otimizar o todo: entender que o software concluído é muito mais que a soma das
partes
entregues e verificar como ele está alinhado com os objetivos da empresa. (7) Adiar
decisões:
deixar as decisões e comprometimentos para o último momento possível,
permitindo coletar
informações e ter experiências para fortalecera tomada de decisão. Enfim, galera... isso
é o Método
Lean!


PRINCÍPIO #1

PRINCÍPIO #2

AMPLIFICAR/CRIAR
CONHECIMENTO

Deve-se eliminar tudo aquilo que não é percebido pelo cliente, por não
agregar valor para ele. Ex: passos extras, burocracia, documentação que
não será lida, processo pesado, etc. Também existem aqueles
desperdícios que são trabalhos parcialmente prontos - tudo que teve um
começo, mas não teve fim e, portanto, não será utilizado.

Deve-se garantir que o conhecimento sobre o software seja criado durante
o desenvolvimento, em vez de ter uma lista de requisitos e/ou um layout
recomendando como deve ser o resultado da aplicação antes do início de
seu desenvolvimento.


PRINCÍPIO #3

PRINCÍPIO #4

PRINCÍPIO #5

PRINCÍPIO #6

PRINCÍPIO #7

FORTALECER O TIME/

ENTREGAS RÁPIDAS

QUALIDADE

OTIMIZAR O TODO

ADIAR

O software que está sendo produzido é uma espécie de espelho da equipe
que o está desenvolvendo. Para que as pessoas se sintam motivadas e
engajadas na atuação em equipe, eles precisam de respeito e confiança.
Deve-se criar um ambiente onde a equipe trabalhe de forma auto-
organizada e auto-dirigida, evitando micro-gerenciamento.

Outra dica importante é que, sem entregas rápidas, você não consegue
receber um retorno, ou seja, você não consegue saber o que errou para
tentar corrigir. Por isso, procurar a velocidade na entrega é uma maneira
de garantir que o cliente tenha em mãos aquilo que ele precisava para hoje
e não o que precisou.

Segundo os criadores da teoria, a qualidade é inegociável e deve ser
entregue em duas dimensões: a integridade percebida e conceituai. A
integridade percebida quer dizer que foi entregue ao cliente um produto
usual, funcional, confiável. A integridade conceituai quer dizer que o
sistema tem pontos centrais altamente coesos e fáceis.

Deve-se entender que o software concluído é muito mais que a soma das
partes entregues e verificar como ele está alinhado com os objetivos da
empresa. O ideal não é olhar apenas para o desenvolvimento, mas para
como aquele requisito está sendo atendido, como ele está sendo
detalhado e repassado para entrarem desenvolvimento, etc.

Deve-se diminuir as incertezas, retardando decisões até que elas sejam
formuladas em cima de acontecimentos mais conhecidos, previsíveis e
firmes. Decisões tomadas tardiamente devem ser mais corretas, uma vez
que as melhores são baseadas em fatos ocorridos e não em suposições ou
especulações.

Ele serviu de base para o método ágil e tem várias características em comum, mas são
diferentes. A tabela abaixo organiza um comparativo para vocês terem noção das diferenças.

CARACTERÍSTICA | LEAN |
ÁGIL
OBCECADO COM... DESPERDÍCIO
CLIENTES E MERCADOS

GERENCIA... PROCESSOS
INCERTEZAS

ENTREGA DE... VALOR
PRODUTO EM FUNCIONAMENTO
APLICA... HEURÍSTICAS
PRINCÍPIOS

FOCA NO PROCESSO DE... PADRONIZAÇÃO E CONFORMIDADE
AUTOGERENCIAMENTO P/ MAXIMIZAR AUTONOMIA


RESUMo

ESTAMOS DESCOBRINDO MANEIRAS MELHORES DE DESENVOLVER SOFTWARE, FAZENDO-O NÓS MESMOS E AJUDANDO
OUTROS A
FAZEREM 0 MESMO. ATRAVÉS DESTE TRABALHO. PASSAMOS A VALORIZAR:


INDIVÍDUOS E INTERAÇÕES
SOFTWARE EM FUNCIONAMENTO
COLABORAÇÃO COM 0 CLIENTE
RESPONDER A MUDANÇAS

PROCESSOS E FERRAMENTAS
DOCUMENTAÇÃO ABRANGENTE
NEGOCIAÇÃO DE CONTRATOS
SEGUIR UM PLANO

OU SEJA, MESMO HAVENDO VALOR NOS ITENS À DIREITA, VALORIZAMOS MAIS OS ITENS À ESQUERDA.


INDIVÍDUOS E ITERAÇÕES MAIS QUE
PROCESSOS E FERRAMENTAS

SOFTWARE EM FUNCIONAMENTO MAIS
QUE DOCUMENTAÇÃO ABRANGENTE

COLABORAÇÃO COMO CLIENTE MAIS
QUE NEGOCIAÇÃO DE CONTRATOS

RESPONDER A MUDANÇAS MAIS QUE
SEGUIR UM PLANO

Devemos entender que o desenvolvimento de software é uma atividade
humana e que a qualidade da interação entre as pessoas pode resolver
problemas crônicos de comunicação. Processos e Ferramentas são
importantes, mas devem ser simples e uteis.

0 maior indicador de que sua equipe realmente construiu algo é software
funcionando. Clientes querem é resultado e isso pode ser com software
funcionando. Documentação também é importante, mas que seja somente o
necessário e que agregue valor.

Devemos atuarem conjunto com o cliente e não "contra" ele ou ele "contra" a
gente. 0 que deve acontecer é colaboração, tomada de decisões em conjunto
e trabalho em equipe, fazendo que todos sejam um só em busca de um
objetivo.

Desenvolver software e produtos é um ambiente de alta incerteza e por isso
não podemos nos debruçar em planos enormes e cheio de premissas. O que
deve ser feito é aprender com as informações efeedbacks e adaptar o plano a
todo momento.

PRINCIPAIS METODOLOGIAS ÁGEIS

SCRUM CRYSTAL
XP

TDD ATDD
BDD

FDD DDD
MDD

DSDM ASD
KANBAN

LEAN AUP
AGILE MODELING
OSSD SCRUMBAN
BADM


NÓS SEGUIMOS ESSES PRINCÍPIOS..

Nossa maior prioridade é satisfazer o cliente através da entrega contínua e adiantada
e software com valor
agregado.

Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento. Processos
ágeis tiram
vantagem das mudanças visando vantagem competitiva para o cliente.

Entregar frequentemente software funcionando, de poucas semanas a poucos meses, com preferência à
menor
escala de tempo.

Pessoas de negócio e desenvolvedores devem trabalhar diariamente em conjunto por todo o projeto.

Construa projetos em torno de indivíduos motivados. Dê a eles o ambiente e o suporte necessário e
confie neles
para fazer o trabalho.

O método mais eficiente e eficaz de transmitir informações para e entre uma equipe de
desenvolvimento é através
de conversa face a face.

Software funcionando é a medida primária de progresso.

Os processos ágeis promovem desenvolvimento sustentável. Os patrocinadores, desenvolvedores
e usuários
devem ser capazes de manter um ritmo constante indefinidamente.

Contínua atenção à excelência técnica e bom design aumenta a agilidade.
Simplicidade-a arte de maximizara quantidade de trabalho não realizado-é essencial.


As melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis.

Em intervalos regulares, a equipe reflete sobre como se tornar mais eficaz e então
refina e ajusta seu
comportamento de acordo.

CRITÉRIO MODELOS TRADICIONAIS
MODELOS AGEIS


PLANEJAMENTO

RISCOS

EQUIPE

TEMPO DE
ENTREGA

ACEITAÇÃO DE
MUDANÇAS

PREVISIBILIDADE

RESULTADOS AO

LONGO 00
TEMPO

APRESENTAÇÃO

DE
INFORMAÇÕES
DO PROJETO

PRAZO DE
ENTREGA

Comumente realizado em detalhe para todo
o projeto em sua fase inicial.

Pode exigir um grande esforço e equipe para
atuar com os riscos de todo o projeto.

Possui profissionais com papéis bem
definidos, quantificada e mobilizada
conforme o planejamento do projeto. A
equipe executa o projeto guiado pelo
Gerente de Projetos conforme o plano
estabelecido.

É realizado conforme o plano estabelecido e
pode durar semanas, meses ou até mesmo
anos.

Gerenciamento formal de mudanças, pois
exige alteração do planejamento já realizado
e geralmente precisa passar por aprovações
formais de um ou mais níveis hierárquicos.

Depende do intervalo de monitoramento e
controle do projeto. Quanto mais curto,
maior a chance de prever as ocorrências
futuras. Quanto maior o intervalo, menor a
chance de prever as ocorrências futuras.

Tende a demorar a dar resultados a curto
prazo, pois as entregas são geralmente
realizadas ao final do projeto. Melhores
resultados são apresentados em projetos de
maiorduração.

Geralmente de uma apresentação formal
previamente agendada com os stakeholders
em intervalos de tempo. As informações
podem ser detalhadas ou não conforme a
necessidade do público envolvido.

Conforme estabelecido no planejamento do
projeto. No caso de mudanças aprovadas,
varia conforme os impactos das solicitações

Planejamento de alto nível no início do projeto e
os detalhes são realizados durante o projeto. Não
é necessário possuir um planejamento detalhado
de todo o projeto. A restrição se dá apenas em
possuir os detalhes do trabalho para a próxima
iteração.

Prioriza os riscos gerais do projeto, mas foca
principalmente nos riscos das próximas iterações,
atuando assim em um escopo bem reduzido. A
própria equipe atua com os riscos e pode obter
apoio externo.

Equipe multidisciplinar, multifuncional e auto-
organizada. Ela decide como fazer e atua de
forma colaborativa.

Fixo e é conforme a definição de duração das
iterações que comumente varia entre i e 4
semanas.

Mudanças são bem-vindas. Evita-se mudar 0
escopo da iteração em andamento, mas 0 escopo
das futuras iterações podem ser replanejado
conforme a necessidade do cliente.

Tende a ter uma grande previsibilidade futura
devido à constante análise e feedback através das
oportunidades de inspeção e adaptação providas
pelo método.

Gera resultados a curto, médio e longo prazo, pois
atua com entregas antecipadas e de valor
agregado e contínuo ao cliente.

Geralmente informal e utiliza radiadores de
informação no ambiente de trabalho durante
todo 0 projeto, de modo que as informações do
projeto fiquem visíveis e transparentes a toda
equipe e envolvidos.

Conforme 0 tamanho da iteração e 0
planejamento das releases para as entregas
significativas.


e podem ser traumáticas aos envolvidos
quanto às suas expectativas.

Detalhada desde o início do projeto.

Nas fases iniciais e nas principais validações
do produto.

Geralmente em prazos longos através da
realização de reuniões após uma grande
etapa ou grande entrega do projeto.

Gerente de Projetos.

Claros e definidos.

Guiado conforme o planejamento do projeto
e nos processos estabelecidos no plano.

Melhor resultado em projetos com escopo
muito bem definido e orientado a
planejamento.

Abrangente no início e detalhada somente o
necessário durante o projeto conforme os
objetivos das iterações e releases.

Durante todo o projeto, o cliente faz parte da
equipe.

Em prazos curtos, sempre ao final das iterações.

Equipe do Projeto.

Conforme a confiança na equipe e ambiente
colaborativo.

Empírico e guiado ao produto e às pessoas.
Orientado à geração de valor e conforme
priorização dos riscos.

Melhor resultado em projetos cujo escopo é
dinâmico e construído durante a execução do
projeto.

CARACTERÍSTICA | LEAN |
ÁGIL
OBCECADO COM... DESPERDÍCIO
CLIENTES E MERCADOS

GERENCIA... PROCESSOS
INCERTEZAS

ENTREGA DE... VALOR
PRODUTO EM FUNCIONAMENTO
APLICA... HEURÍSTICAS
PRINCÍPIOS

FOCA NO PROCESSO DE... PADRONIZAÇÃO E CONFORMIDADE
AUTOGERENCIAMENTO P/ MAXIMIZAR AUTONOMIA

Q) PARA MAIS DICAS: WWW.INSTA6RAM.COM/PROFESSORDIEGOCARVALHO


QUESTõES CoMENTADAS - CESPE

í. (CESPE / BANRISUL - 2022) O modelo ágil não pode ser aplicado a qualquer processo
de
software, pois, para tanto, é necessário que o processo seja projetado de
modo que suas
características sejam modeladas como componentes e, em seguida, construídas
dentro do
contexto da arquitetura do sistema.

Comentários:

O modelo ágil pode ser aplicado a qualquer processo de software, desde que os
princípios do
pensamento ágil sejam seguidos. Além disso, não é necessário que o processo seja
projetado de
modo que suas características sejam modeladas como componentes - isso seria verdadeiro
para
desenvolvimento rápido e, não, desenvolvimento ágil.

Gabarito: Errado

Item. 2. (CESPE / Petrobrás - 2022) Entre as principais características dos métodos ágeis,
destacam-se
a maximização da documentação formal e o envolvimento dos clientes.

Comentários:

Conforme vimos em aula, o manifesto ágil preconiza que se valorize
mais software em
funcionamento do que documentação abrangente. Ou seja, não que se falar em
documentação
abrangente, e sim em uma documentação mais enxuta.

Gabarito: Errado

Item. 3. (CESPE / TCE-ES - 2012) Em virtude de as metodologias ágeis
gerarem excessiva
documentação, a gestão do conhecimento depende diretamente dos
programadores
envolvidos no projeto.

Comentários:

No ágil, documentação é descartável? Não, ela é útil para ajudar a comunicação e
colaboração na
equipe, melhorar a transferência de conhecimento, preservar informações históricas,
satisfazer
necessidades contratuais ou legais, entre outros. A documentação é importante, sim; mas
valoriza-
se mais o software em funcionamento. Logo, não é correto dizer que metodologias ágeis
geram
excessiva documentação.

Gabarito: Errado


4- (CESPE/ EBC-2011) O que os métodos ágeis buscam é como evitaras mudanças desde o
início
do projeto e não a melhor maneira de tratar essas mudanças.

Comentários:

Metodologias Ágeis são extremamente afeitas a mudanças de requisitos,
adaptando-se a novos
contextos e respondendo a cada modificação. Logo, mudanças nos requisitos são
bem-vindas,
mesmo tardiamente no desenvolvimento.

Gabarito: Errado

Item. 5. (CESPE / BASA - 2010) Desenvolvimento ágil de software (Agile Software
Development) ou
método ágil é aplicado, principalmente, a grandes corporações, uma vez que permite
produzir
grandes sistemas de forma ágil.

Comentários:

Segundo Sommerville: "Todos os métodos têm limites, e os métodos ágeis são somente
adequados
para alguns tipos de desenvolvimento de sistema. Na minha opinião, eles são mais
adequados para 0
desenvolvimento de sistemas de pequenas e médias empresas e produtos para
computadores
pessoais". A questão afirma que ela é aplicada principalmente a grandes corporações. De
fato, isso
está errado! Ela ainda é aplicada principalmente a aplicações pequenas e médias, mas
permite -
sim - produzir grandes sistemas de forma ágil.

Gabarito: Errado

Item. 6. (CESPE/TCU-2010)A agilidade não pode ser aplicada a todo e qualquer processo de software.

Comentários:

A agilidade pode - sim - ser aplicada a qualquer processo de software. Entretanto,
para obtê-la, é
essencial que seja projetado para que a equipe possa adaptar e alinhar (racionalizar)
tarefas; possa
conduzir o planejamento compreendendo a fluidez de uma abordagem do desenvolvimento
ágil; e
possa eliminar tudo, exceto os artefatos essenciais, conservando-os enxutos.

Gabarito: Errado

Item. 7. (CESPE / UNIPAMPA - 2009) XP, Scrum e Cristal são exemplos de modelos
ágeis de
desenvolvimento de sistemas.

Comentários:

METODOLOGIAS ÁGEIS


SCRÜM CRYSTAL
XP

TDD ATDD
BDD

FDD DDD
MDD

DSDM ASD
KANBAN

LEAN AÜP
AGILE MODELING
OSSD SCRÜMBAN
BADM

Todos são exemplos de metodologias ágeis (apesar do nome errado: Crystal e, não, Cristal).

Gabarito: Correto

Item. 8. (CESPE / EBC - 2011) Considerando o conceito de metodologia ágil em apreço, é
correto
afirmar que as seguintes metodologias são ágeis: XP (Extreme Programming), Scrum,
Crystal,
FDD (Feature Driven Development), DSDM (Dynamic Systems Development Method) e
Open
Source Software Development.

Comentários:

METODOLOGIAS ÁGEIS

SCRÜM CRYSTAL
XP

TDD ATDD
BDD

FDD DDD
MDD

DSDM ASD
KANBAN

LEAN AÜP
AGILE MODELING
OSSD SCRÜMBAN
BADM

De fato, todas essas são exemplos de metodologias ágeis.

Gabarito: Correto

Item. 9. (CESPE / CNJ - 2013 O desenvolvimento ágil de sistemas consiste em uma linguagem
de
modelagem que permite aos desenvolvedores visualizarem os produtos de seu
trabalho em
gráficos padronizados.

Comentários:

Não, desenvolvimento ágil de sistemas não é uma linguagem de modelagem. Sabe qual é
um
exemplo de linguagem de modelagem? UML (Unified Modeling Language)!

Gabarito: Errado


io.(CESPE / EBC - 2011) É conveniente que o contrato, entre cliente e
fornecedor, para o
desenvolvimento de um sistema computacional, contenha a lista de requisitos para o
software.
Contudo, os métodos ágeis de desenvolvimento preconizam que o referido contrato
estabeleça
o preço, a ser pago pelo cliente, com base no tempo necessário para o desenvolvimento
do
sistema e não com base no conjunto de requisitos.

Comentários:

Segundo Martin Fowler, pode-se fixar um orçamento para o software antes de
desenvolvê-lo. A
abordagem ágil comum é fixartempo e preço, deixando o escopo variar (os requisitos são
variáveis)
de forma controlada. É o famoso: "Tempofixo, escopo variável".

Gabarito: Correto

Item. 11. (CESPE / MPOG - 2015) Metodologias de desenvolvimento ágil enfocam atividades de
projeto
e implementação, desconsiderando as atividades de elicitação de requisitos e a produção
de
documentação.

Comentários:

É absurdo pensar que se desconsidera atividades de elicitação de requisitos - não há
o que se
discutir nesse ponto. Além disso, o Manifesto Ágil afirma que, mesmo havendo
valor na
documentação extensa de software, valoriza-se mais o software em funcionamento.
Em outras
palavras, é errado afirmar que se desconsidera a produção de documentação, tendo em
vista que
há uma codificação não formal.

Gabarito: Errado

Item. 12. (CESPE / TRE-PI - 2008) No que se refere a métodos ágeis de desenvolvimento de
sistemas,
assinale a opção correta.

a) A aplicação de método ágil para desenvolvimento de grandes sistemas pode
enfrentar
dificuldades que o tornem inviável.

b) O documento de requisitos, apesar de abordar um conjunto pequeno de
funcionalidades,
deve especificar toda a necessidade do usuário.

c) O sistema é construído em pequenos blocos, que irão compor uma versão a ser
entregue aos
usuários.

d) A documentação de projeto deve ser feita pelo próprio desenvolvedor,
seguindo padrões
simplificados.


e) Para atingir os objetivos de agilidade exigidos, os desenvolvedores devem
seguir processos
simplificados para a construção do software.

Comentários:

a) Correto. Aqui temos a teoria e a prática: no início, tanto a teoria
quanto a prática não
recomendavam que as metodologias ágeis fossem aplicadas a sistemas grandes. No
entanto,
atualmente, isso já não é mais uma limitação. Hoje em dia, as metodologias
ágeis adquiriram
maturidade suficiente para desenvolver sistemas grandes e complexos. Porém, isso ainda
está na
teoria, por isso as questões ainda cobram.

b) Errado. Em metodologias ágeis, há uma documentação abrangente no início e
detalhada
somente o necessário durante o projeto conforme os objetivos das iterações e releases.
No entanto,
não existe um "Documento de Requisitos" - isso é coisa de metodologias tradicionais.
Além disso,
nenhum documento nunca conseguirá especificar todas as necessidades dos usuários.

c) Correto. Não vislumbro qualquer erro nesse item. Ora, metodologias ágeis
são iterativas e
incrementais, dividindo o sistema em pequenas partes e sempre entregando versões que
agreguem
valor aos usuários. Se você errou esse item, fique tranquilo - o vacilo foi da banca!

d) Errado. Documentação de Projeto? Isso é coisa de metodologias tradicionais. Além
disso, o
Product Backlog é feito pelo Product Owner, mas isso não é assunto para essa aula.

e) Errado. Não existe esse negócio de "objetivos de agilidade exigidos". Isso soa como
se existissem
métricas de agilidade que tivessem que ser atingidas.

Gabarito: Letra A

Item. 13. (CESPE / TCE-PR - 2016) Os métodos ágeis para o desenvolvimento de software
representam
uma evolução da engenharia de software tradicional, uma vez que são aplicáveis a todos
ostipos
de projetos, produtos, pessoas e situações.

Comentários:

É um erro comum achar que metodologias ágeis servem para todas as ocasiões. Não
confundam:
agilidade pode ser aplicada a todo processo de software; mas métodos ágeis não
funcionam bem
em qualquer situação.

Gabarito: Errado

Item. 14. (CESPE / TCE-PR - 2016) Um dos princípios de agilidade da Agile Alliance dispõe
que a entrega
completa de um software garante a satisfação do cliente.


Comentários:

De acordo com o i° Princípio Ágil: Nossa maior prioridade é satisfazer o cliente
através da entrega
contínua e adiantada de software com valor agregado. Percebam que não existe entrega
completa,
mas contínua.

Gabarito: Errado

i5.(CESPE / Ministério da Economia - 2020) Os modelos ágeis de
desenvolvimento
de software dão grande ênfase às definições de atividades e aos processos e pouca
ênfase à
pragmática e ao fator humano.

Comentários:

Que isso? É exatamente o oposto! O foco é maior no pragmatismo, empirismo e fatores
humanos
do que nas definições de atividades ou processos.

Gabarito: Errado

i6.(CESPE/MEC-2015) Acatar as mudanças de requisitos, ainda que o desenvolvimento já
esteja
avançado, é um dos princípios do Manifesto Ágil.

Comentários:

De acordo com o 2° princípio ágil: mudanças nos requisitos são bem-vindas, mesmo
tardiamente
no desenvolvimento. Processos ágeis tiram vantagem das mudanças visando
vantagem
competitiva para o cliente.

Gabarito: Correto

Item. 17. (CESPEITRT17 - 2013) Em um desenvolvimento ágil que segue o manifesto ágil, não
se deve
aceitar mudanças de requisitos, mesmo no fim do desenvolvimento. Processos ágeis não se
adequam a mudanças não planejadas.

Comentários:

De acordo com o 2° princípio ágil: mudanças nos requisitos são bem-vindas, mesmo
tardiamente
no desenvolvimento. Processos ágeis tiram vantagem das mudanças visando
vantagem
competitiva para o cliente.

Gabarito: Errado


i8.(CESPE / EBSERH - 2018) Nas metodologias de desenvolvimento ágeis, mudanças em
requisitos são bem recebidas, mesmo em fases mais avançadas do desenvolvimento.

Comentários:

De acordo com o 20 princípio ágil: mudanças nos requisitos são bem-vindas, mesmo
tardiamente
no desenvolvimento. Processos ágeis tiram vantagem das mudanças visando
vantagem
competitiva para o cliente.

Gabarito: Correto


QUESTõES CoMENTADAS - FCC

í. (FCC / SEFAZ-AP - 2022) Dentre os doze Princípios do Manifesto Ágil, incluem-se:

a) funcionalidade, satisfação do cliente e trabalho em conjunto.

b) respeito ao cliente, economia de recursos e paralelismo.

c) resiliência, motivação e trabalho em pares.

d) simplicidade, motivação e paralelismo.

e) especificidade, longevidade do software e prazos curtos.

Comentários:

Os 12 Princípios Ágeis


Satisfaça o
consumidor

Confie
e apoie

Atenção
continua

Aceite bem
mudanças

Conversas
face a face

Mantenha a
simplicidade

Entregas
frequentes

Softwares
funcionando

Times

auto-organizados

Trabalhe em
conjunto

Desenvolvimento
sustentável

Refletir
e ajustar

Trata-se de funcionalidade (software funcionando), satisfação do cliente (satisfaça
o consumidor)
e trabalho em conjunto.

Gabarito: Letra A


QUESTõES CoMENTADAS - FG V

Item. 2. (FGV/ IMBEL-2021) Com referência aos valores do The Agile Manifesto, analise as afirmativas
a seguir.

I. Processos e ferramentas mais que indivíduos e interação entre eles.

II. Software em funcionamento mais que documentação abrangente.

III. Colaboração do cliente mais que negociação de contratos.

IV. Seguir um plano mais que responder a mudanças.

Está correto o que se afirma em:

a) I e II, somente

b) II e III, somente.

c) III e IV, somente.

d) I e IV, somente.

e) II e IV, somente.

Comentários:

(I) Errado, trata-se do inverso; (II) Correto; (III) Correto; (IV) Errado, trata-se do inverso.

Gabarito: Letra B

Item. 3. (FGV / MPE-MS- 2013) Considerando a caracterização de agilidade e processo de
desenvolvimento ágil, segundo Pressman, analise as afirmativas a seguir.

I. Um processo ágil de software deve ser incrementalmente adaptável.

II. Um processo ágil de software permite que as pessoas e a equipe se moldem a ele
com
facilidade.

III. Os conceitos ágeis são efetivos, pois diminuem a imprevisibilidade sistêmica ao
enfatizar
entregas em prazos curtos.

a) se somente a afirmativa I estiver correta.

b) se somente a afirmativa II estiver correta.

c) se somente a afirmativa III estiver correta.

d) se somente as afirmativas I e II estiverem corretas.

e) se todas as afirmativas estiverem corretas.

Comentários:


(I) Correto, idealmente ele deve se adaptar de forma incremental; (II) Errado, a
agilidade não tem
relação com a facilidade da equipe de se moldar; (III) Errado, mas questão polêmica!
Eu acredito
que os conceitos ágeis diminuem a imprevisibilidade. Já alguns argumentam que conceitos
ágeis
não diminuem a imprevisibilidade, na verdade eles aceitam que a imprevisibilidade é
inevitável e,
dessa forma, provêm métodos de se adaptar às mudanças rapidamente.

Gabarito: Letra A

Item. 4. (FGV / PGE-RO - 2015) Durante 5 anos gerenciando o desenvolvimento de
sistemas de
informação, Claudia teve que lidar com diversas insatisfações de seus usuários pois os
sistemas
não atendiam as suas necessidades. Claudia decidiu, então, implantar métodos
ágeis de
desenvolvimento e definiu os seguintes princípios:

I. Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento.

II. O método mais eficiente e eficaz de transmitir informações para e entre uma
equipe de
desenvolvimento é através da documentação.

III. Simplicidade é essencial.

Dentre os princípios definidos por Claudia, o que infringe os princípios do
manifesto para
Desenvolvimento Ágil de Software é o que se afirma em:

a) somente I;

b) somente II;

c) somente III;

d) somente I e III;

e) I, lie III.

Comentários:

NÓS SEGUIMOS ESSES PRINCÍPIOS..

Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento. Processos
ágeis tiram
vantagem das mudanças visando vantagem competitiva para o cliente.

O método mais eficiente e eficaz de transmitir informações para e entre uma equipe de
desenvolvimento é através
de conversa face a face.

Simplicidade - a arte de maximizara quantidade de trabalho não realizado - é essencial.

(I) Correto, mudanças são sempre bem-vindas; (II) Errado, o método mais
eficiente é frente-a-
frente; (III) Correto. Como a questão pede os princípios que infringem o manifesto
ágil, trata-se da
segunda opção.

Gabarito: Letra B


5- (FGV/ TJ-RO - 2015) O manifesto ágil tem por princípio que:

a) mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento;

b) a contínua atenção à excelência técnica reduz a agilidade;

c) a redução do backlog é a medida primária de progresso;

d) as melhores arquiteturas, requisitos e designs emergem de equipes que possuem um
bom
líder;

e) pessoas de negócio e desenvolvedores devem trabalharem ambientes separados para
reduzir
as interferências no processo de desenvolvimento.

Comentários:

NÓS SEGUIMOS ESSES PRINCÍPIOS..

Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento. Processos
ágeis tiram
vantagem das mudanças visando vantagem competitiva para 0 cliente.

Pessoas de negócio e desenvolvedores devem trabalhar diariamente em conjunto portodo 0 projeto.
Software funcionando é a medida primária de progresso.

Contínua atenção à excelência técnica e bom design aumenta a agilidade.

As melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis.

O único princípio correto é que mudanças nos requisitos são bem-vindas, mesmo
tardiamente no
desenvolvimento.

Gabarito: Letra A

Item. 6. (FGV / TJ-GO - 2014) Escreva O Manifesto Ágil lista valores seguidos por
desenvolvedores com
a finalidade de melhorar a maneira pela qual o software é desenvolvido. A alternativa
que se
encontra no manifesto é:

a) seguir um plano mais que responder a mudanças;

b) indivíduos e interações mais que processos e ferramentas;

c) documentação abrangente mais que software em funcionamento;

d) negociação de contratos mais que colaboração com o cliente;

e) negociação de contratos mais que indivíduos e interações.


Comentários:

(i) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Respondera mudanças acima de seguirfielmente um plano.

Gabarito: Letra B

Item. 7. (FGV / Câmara Municipal de Caruaru-PE - 2015) O desenvolvimento ágil de software é
guiado
por metodologias que compartilham um conjunto comum de valores e de princípios, conforme
definido pelo Manifesto Ágil. Assinale a opção que indica um princípio do desenvolvimento ágil.

a) As mudanças nos requisitos devem ocorrer dentro do quadro de tempo estabelecido
para a
iteração.

b) O método mais eficiente e eficaz de transmitir informações para e entre uma
equipe de
desenvolvimento é por meio de conversa face a face.

c) Os intervalos regulares devem ser evitados para tornar a equipe mais eficaz e
maximizar a
quantidade de trabalho realizado.

d) As pessoas de negócio e desenvolvedores devem interagirsomente no início de cada iteração.

e) A entrega contínua e adiantada de software, mesmo que o conjunto de
funcionalidades
desenvolvidas não agregue valor, deve serfeita para satisfazer o cliente.

Comentários:

(a) Errado, mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento;
(b)
Correto; (c) Errado, em intervalos regulares, a equipe reflete sobre como se tornar
mais eficaz e
então refina e ajusta seu comportamento de acordo; (d) Errado,
pessoas de negócio e
desenvolvedores devem trabalhar diariamente em conjunto por todo o projeto; (e) Errado,
nossa
maior prioridade é satisfazer o cliente através da entrega contínua e adiantada de
software com
valor agregado.

Gabarito: Letra B

Item. 8. (FGV/ PROCEMPA-2014) O Manifesto Ágil é uma declaração de princípios que
fundamentam
o desenvolvimento ágil de software. A respeito desses princípios, assinale a afirmativa correta:

a) As melhores arquiteturas, requisitos e designs emergem de equipes
lideradas pelo
profissional mais sênior.


b) Em intervalos regulares, a equipe reflete sobre como se tornar mais eficaz e
então refina e
ajusta seu comportamento de acordo.

c) Pessoas de negócio e desenvolvedores devem trabalhar separadamente portodo o projeto.

d) Entregar software quando há poucas semanas de desenvolvimento deve ser evitado para
não
afetar a satisfação do cliente.

e) Mudanças nos requisitos são bem-vindas, desde que não impactem o desenvolvimento.

Comentários:

(a) Errado, as melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis;

(b) Correto; (c) Errado, pessoas de negócio e desenvolvedores devem trabalhar
diariamente em
conjunto portodo o projeto; (d) Errado, entregarfrequentemente software
funcionando, de poucas
semanas a poucos meses, com preferência à menor escala de tempo; (e) Errado, mudanças
nos
requisitos são bem-vindas, mesmo tardiamente no desenvolvimento.

Gabarito: Letra B

Item. 9. (FGV / DPE-RO - 2015) O Manifesto Ágil é uma declaração que reúne os princípios
e práticas
que fundamentam o desenvolvimento ágil de software. É um dos princípios desse manifesto:

a) defeitos no software são a medida primária de progresso;

b) pessoas de negócio e desenvolvedores devem trabalhar isoladamente e se reunir
somente ao
final de cada iteração para validação do software;

c) atenção contínua à excelência técnica deve ser evitada para não afetar a agilidade
uma vez
que simplicidade é essencial;

d) os patrocinadores, desenvolvedores e usuários devem ser capazes de manter
um ritmo
constante indefinidamente evitando interrupções e intervalos regulares;

e) as melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis.

Comentários:

(a) Errado, software funcionando é a medida primária de progresso; (b) Errado, pessoas
de negócio
e desenvolvedores devem trabalhar diariamente em conjunto por todo o projeto;
(c) Errado,
contínua atenção à excelência técnica e bom design aumenta a
agilidade; (d) Errado,
patrocinadores, desenvolvedores e usuários devem ser capazes de manter um ritmo
constante
indefinidamente; (e) Correto.


Gabarito: Letra E

io.(FGV / BANESTES - 2018) Um dos valores relacionados ao ambiente ágil de
desenvolvimento
e:

a) documentação abrangente mais que software funcional;

b) negociação de contratos mais que colaboração do cliente;

c) processos e ferramentas mais que indivíduos e iterações;

d) rapidez na construção mais que excelência técnica;

e) responder a mudanças mais que seguir um plano.

Comentários:

(1) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Responder a mudanças acima de seguir fielmente um plano.

Gabarito: Letra E

n.(FGV / BANESTES - 2018) Com relação aos valores relacionados ao desenvolvimento ágil
de
software, NÃO se pode incluir:

a) colaboração do cliente mais que negociação de contratos;

b) indivíduos e iterações mais que processos e ferramentas;

c) rapidez na construção mais que excelência técnica;

d) responder a mudanças mais que seguir um plano;

e) software funcional mais que documentação abrangente.

Comentários:

(1) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Responder a mudanças acima de seguir fielmente um plano. Notem que
rapidez na
construção mais que excelência técnica não é um dos valores do manifesto ágil.

Gabarito: Letra C

Item. 12. (FGV/ AL-RO - 2018) Para o desenvolvimento do Sistema de Informações ao Cidadão
(SIC), foi
decidida a utilização de uma metodologia ágil. Segundo o Manifesto Ágil, esta decisão
indica
que foi dado maior valor:

a) aos processos e ferramentas.


b) à resposta a modificações.

c) à documentação abrangente.

d) à negociação do contrato.

e) ao cumprimento do plano.

Comentários:

(i) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Responder a mudanças acima de seguir fielmente um plano.

Gabarito: Letra B


QUESTõES CoMENTADAS - FG V

í. (FGV/ IMBEL-2021) Com referência aos valores do The Agile Manifesto, analise as afirmativas
a seguir.

I. Processos e ferramentas mais que indivíduos e interação entre eles.

II. Software em funcionamento mais que documentação abrangente.

III. Colaboração do cliente mais que negociação de contratos.

IV. Seguir um plano mais que responder a mudanças.

Está correto o que se afirma em:

a) I e II, somente

b) II e III, somente.

c) III e IV, somente.

d) I e IV, somente.

e) II e IV, somente.

Comentários:

(I) Errado, trata-se do inverso; (II) Correto; (III) Correto; (IV) Errado, trata-se do inverso.

Gabarito: Letra B

Item. 2. (FGV / MPE-MS- 2013) Considerando a caracterização de agilidade e processo de
desenvolvimento ágil, segundo Pressman, analise as afirmativas a seguir.

I. Um processo ágil de software deve ser incrementalmente adaptável.

II. Um processo ágil de software permite que as pessoas e a equipe se moldem a ele
com
facilidade.

III. Os conceitos ágeis são efetivos, pois diminuem a imprevisibilidade sistêmica ao
enfatizar
entregas em prazos curtos.

a) se somente a afirmativa I estiver correta.

b) se somente a afirmativa II estiver correta.

c) se somente a afirmativa III estiver correta.

d) se somente as afirmativas I e II estiverem corretas.

e) se todas as afirmativas estiverem corretas.

Comentários:


(I) Correto, idealmente ele deve se adaptar de forma incremental; (II) Errado, a
agilidade não tem
relação com a facilidade da equipe de se moldar; (III) Errado, mas questão polêmica!
Eu acredito
que os conceitos ágeis diminuem a imprevisibilidade. Já alguns argumentam que conceitos
ágeis
não diminuem a imprevisibilidade, na verdade eles aceitam que a imprevisibilidade é
inevitável e,
dessa forma, provêm métodos de se adaptar às mudanças rapidamente.

Gabarito: Letra A

Item. 3. (FGV / PGE-RO - 2015) Durante 5 anos gerenciando o desenvolvimento de
sistemas de
informação, Claudia teve que lidar com diversas insatisfações de seus usuários pois os
sistemas
não atendiam as suas necessidades. Claudia decidiu, então, implantar métodos
ágeis de
desenvolvimento e definiu os seguintes princípios:

I. Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento.

II. O método mais eficiente e eficaz de transmitir informações para e entre uma
equipe de
desenvolvimento é através da documentação.

III. Simplicidade é essencial.

Dentre os princípios definidos por Claudia, o que infringe os princípios do
manifesto para
Desenvolvimento Ágil de Software é o que se afirma em:

a) somente I;

b) somente II;

c) somente III;

d) somente I e III;

e) I, lie III.

Comentários:

NÓS SEGUIMOS ESSES PRINCÍPIOS..

Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento. Processos
ágeis tiram
vantagem das mudanças visando vantagem competitiva para o cliente.

O método mais eficiente e eficaz de transmitir informações para e entre uma equipe de
desenvolvimento é através
de conversa face a face.

Simplicidade - a arte de maximizara quantidade de trabalho não realizado - é essencial.

(I) Correto, mudanças são sempre bem-vindas; (II) Errado, o método mais
eficiente é frente-a-
frente; (III) Correto. Como a questão pede os princípios que infringem o manifesto
ágil, trata-se da
segunda opção.

Gabarito: Letra B


4- (FGV/ TJ-RO - 2015) O manifesto ágil tem por princípio que:

a) mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento;

b) a contínua atenção à excelência técnica reduz a agilidade;

c) a redução do backlog é a medida primária de progresso;

d) as melhores arquiteturas, requisitos e designs emergem de equipes que possuem um
bom
líder;

e) pessoas de negócio e desenvolvedores devem trabalharem ambientes separados para
reduzir
as interferências no processo de desenvolvimento.

Comentários:

NÓS SEGUIMOS ESSES PRINCÍPIOS..

Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento. Processos
ágeis tiram
vantagem das mudanças visando vantagem competitiva para 0 cliente.

Pessoas de negócio e desenvolvedores devem trabalhar diariamente em conjunto portodo 0 projeto.
Software funcionando é a medida primária de progresso.

Contínua atenção à excelência técnica e bom design aumenta a agilidade.

As melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis.

O único princípio correto é que mudanças nos requisitos são bem-vindas, mesmo
tardiamente no
desenvolvimento.

Gabarito: Letra A

Item. 5. (FGV / TJ-GO - 2014) Escreva O Manifesto Ágil lista valores seguidos por
desenvolvedores com
a finalidade de melhorar a maneira pela qual o software é desenvolvido. A alternativa
que se
encontra no manifesto é:

a) seguir um plano mais que responder a mudanças;

b) indivíduos e interações mais que processos e ferramentas;

c) documentação abrangente mais que software em funcionamento;

d) negociação de contratos mais que colaboração com o cliente;

e) negociação de contratos mais que indivíduos e interações.


Comentários:

(i) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Respondera mudanças acima de seguirfielmente um plano.

Gabarito: Letra B

Item. 6. (FGV / Câmara Municipal de Caruaru-PE - 2015) O desenvolvimento ágil de software é
guiado
por metodologias que compartilham um conjunto comum de valores e de princípios, conforme
definido pelo Manifesto Ágil. Assinale a opção que indica um princípio do desenvolvimento ágil.

a) As mudanças nos requisitos devem ocorrer dentro do quadro de tempo estabelecido
para a
iteração.

b) O método mais eficiente e eficaz de transmitir informações para e entre uma
equipe de
desenvolvimento é por meio de conversa face a face.

c) Os intervalos regulares devem ser evitados para tornar a equipe mais eficaz e
maximizar a
quantidade de trabalho realizado.

d) As pessoas de negócio e desenvolvedores devem interagirsomente no início de cada iteração.

e) A entrega contínua e adiantada de software, mesmo que o conjunto de
funcionalidades
desenvolvidas não agregue valor, deve serfeita para satisfazer o cliente.

Comentários:

(a) Errado, mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento;
(b)
Correto; (c) Errado, em intervalos regulares, a equipe reflete sobre como se tornar
mais eficaz e
então refina e ajusta seu comportamento de acordo; (d) Errado,
pessoas de negócio e
desenvolvedores devem trabalhar diariamente em conjunto por todo o projeto; (e) Errado,
nossa
maior prioridade é satisfazer o cliente através da entrega contínua e adiantada de
software com
valor agregado.

Gabarito: Letra B

Item. 7. (FGV/ PROCEMPA-2014) O Manifesto Ágil é uma declaração de princípios que
fundamentam
o desenvolvimento ágil de software. A respeito desses princípios, assinale a afirmativa correta:

a) As melhores arquiteturas, requisitos e designs emergem de equipes
lideradas pelo
profissional mais sênior.


b) Em intervalos regulares, a equipe reflete sobre como se tornar mais eficaz e
então refina e
ajusta seu comportamento de acordo.

c) Pessoas de negócio e desenvolvedores devem trabalhar separadamente portodo o projeto.

d) Entregar software quando há poucas semanas de desenvolvimento deve ser evitado para
não
afetar a satisfação do cliente.

e) Mudanças nos requisitos são bem-vindas, desde que não impactem o desenvolvimento.

Comentários:

(a) Errado, as melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis;

(b) Correto; (c) Errado, pessoas de negócio e desenvolvedores devem trabalhar
diariamente em
conjunto portodo o projeto; (d) Errado, entregarfrequentemente software
funcionando, de poucas
semanas a poucos meses, com preferência à menor escala de tempo; (e) Errado, mudanças
nos
requisitos são bem-vindas, mesmo tardiamente no desenvolvimento.

Gabarito: Letra B

Item. 8. (FGV / DPE-RO - 2015) O Manifesto Ágil é uma declaração que reúne os princípios
e práticas
que fundamentam o desenvolvimento ágil de software. É um dos princípios desse manifesto:

a) defeitos no software são a medida primária de progresso;

b) pessoas de negócio e desenvolvedores devem trabalhar isoladamente e se reunir
somente ao
final de cada iteração para validação do software;

c) atenção contínua à excelência técnica deve ser evitada para não afetar a agilidade
uma vez
que simplicidade é essencial;

d) os patrocinadores, desenvolvedores e usuários devem ser capazes de manter
um ritmo
constante indefinidamente evitando interrupções e intervalos regulares;

e) as melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis.

Comentários:

(a) Errado, software funcionando é a medida primária de progresso; (b) Errado, pessoas
de negócio
e desenvolvedores devem trabalhar diariamente em conjunto por todo o projeto;
(c) Errado,
contínua atenção à excelência técnica e bom design aumenta a
agilidade; (d) Errado,
patrocinadores, desenvolvedores e usuários devem ser capazes de manter um ritmo
constante
indefinidamente; (e) Correto.


Gabarito: Letra E

Item. 9. (FGV / BANESTES - 2018) Um dos valores relacionados ao ambiente ágil de
desenvolvimento
e:

a) documentação abrangente mais que software funcional;

b) negociação de contratos mais que colaboração do cliente;

c) processos e ferramentas mais que indivíduos e iterações;

d) rapidez na construção mais que excelência técnica;

e) responder a mudanças mais que seguir um plano.

Comentários:

(1) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Responder a mudanças acima de seguir fielmente um plano.

Gabarito: Letra E

10.(FGV / BANESTES - 2018) Com relação aos valores relacionados ao desenvolvimento ágil
de
software, NÃO se pode incluir:

a) colaboração do cliente mais que negociação de contratos;

b) indivíduos e iterações mais que processos e ferramentas;

c) rapidez na construção mais que excelência técnica;

d) responder a mudanças mais que seguir um plano;

e) software funcional mais que documentação abrangente.

Comentários:

(1) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Responder a mudanças acima de seguir fielmente um plano. Notem que
rapidez na
construção mais que excelência técnica não é um dos valores do manifesto ágil.

Gabarito: Letra C

Item. 11. (FGV/ AL-RO - 2018) Para o desenvolvimento do Sistema de Informações ao Cidadão
(SIC), foi
decidida a utilização de uma metodologia ágil. Segundo o Manifesto Ágil, esta decisão
indica
que foi dado maior valor:

a) aos processos e ferramentas.


b) à resposta a modificações.

c) à documentação abrangente.

d) à negociação do contrato.

e) ao cumprimento do plano.

Comentários:

(i) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Responder a mudanças acima de seguir fielmente um plano.

Gabarito: Letra B


QUESTõES CoMENTADAS - DIvERSAS BANCAS

í. (FADESP/ UEPA - 2020) Um dos princípios do Manifesto Ágil é o de que
os indivíduos e
interações são mais importantes que processos e ferramentas. Um outro princípio é o de que:

a) o usuário é a principal fonte de informação de requisitos de software.

b) os contratos são mais importantes que a colaboração com os clientes.

c) o software funcionando é mais importante do que a documentação completa e detalhada.

d) seguiro plano inicial é mais importante que a adaptação a mudanças.

Comentários:

(a) Errado, isso realmente ocorre, mas não é um dos princípios do manifesto ágil;
(b) Errado,
colaboração com o cliente é mais valorizado que negociação de contratos; (c) Correto;
(d) Errado,
responder a mudanças é mais valorizado que seguir um plano.

Gabarito: Letra C

Item. 2. (IESES/SCGás-2019) A filosofia por trás dos métodos ágeis é refletida no manifesto
ágil, que
foi acordado por muitos dos principais desenvolvedores desses métodos. Assinale a
alternativa
correta que contêm os itens deste manifesto.

a) "Estamos descobrindo melhores maneiras de desenvolver softwares, fazendo-o e ajudando
outros a fazê-lo. Através desse trabalho, valorizamos mais: Indivíduos e
interações do que
processos e ferramentas; Software em funcionamento do que documentação abrangente;
Colaboração do cliente do que negociação de contrato; Respostas a mudanças do que
seguir um
plano. Ou seja, embora itens à direita sejam importantes, valorizamos mais os que
estão à
esquerda".

b) "Estamos descobrindo melhores maneiras de desenvolver softwares, fazendo-o e ajudando
outros a fazê-lo. Através desse trabalho, valorizamos mais: A concorrência e o
desenvolvimento
da competitividade entre as empresas; Software em funcionamento do que
documentação
abrangente; Colaboração do cliente do que negociação de contrato; Respostas a mudanças
do
que seguir um plano. Ou seja, embora itens à direita sejam importantes, valorizamos
mais os
que estão à esquerda".

c) "Estamos descobrindo melhores maneiras de desenvolver softwares, fazendo-o e ajudando
outros a fazê-lo. Através desse trabalho, valorizamos mais: Indivíduos e
interações do que
processos e ferramentas; Software em funcionamento do que documentação abrangente;
Colaboração da equipe de desenvolvedores do que negociação de contrato e clientes;
Respostas
a mudanças do que seguir um plano. Ou seja, embora itens à direita sejam
importantes,
valorizamos mais os que estão à esquerda".


d) "Estamos descobrindo melhores maneiras de vender softwares, fazendo-o e ajudando outros
a fazê-lo. Através desse trabalho, valorizamos mais: Indivíduos e interações do que
processos e
ferramentas; Software para mobiles e, em funcionamento do que documentação
abrangente;
Colaboração do cliente do que negociação de contrato; Respostas a mudanças do que
seguir um
plano. Ou seja, embora itens à direita sejam importantes, valorizamos mais os que
estão à
esquerda".

Comentários:

(i) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Respondera mudanças acima de seguirfielmente um plano.

Gabarito: Letra A

Item. 3. (IESES /SCGás-2019) Identifique a opção correta para conceituar desenvolvimentos
ágeis ou,
que caracterizam métodos ágeis:

a) São métodos de desenvolvimento estáticos em que os incrementos são
dinâmicos e,
normalmente, as novas versões do sistema são criadas e disponibilizadas aos clientes a
cada
duas ou três semanas. Elas não envolvem os clientes no processo de desenvolvimento para
obter feedback rápido sobre a evolução dos requisitos. Assim, minimiza-se a
documentação,
pois se utiliza mais a comunicação informal do que reuniões formais com documentos escritos.

b) São métodos de desenvolvimento incremental em que os incrementos são
pequenos e,
normalmente, as novas versões do sistema são criadas e disponibilizadas aos clientes a
cada
duas ou três semanas. Neles envolvemos clientes no processo de desenvolvimento para
obter
feedback rápido sobre a evolução dos requisitos. Assim, minimiza-se a documentação, pois
se
utiliza mais a comunicação informal do que reuniões formais com documentos escritos.

c) São métodos de desenvolvimento estáticos em que os incrementos são
pequenos e,
normalmente, as novas versões do sistema são criadas e disponibilizadas aos clientes a
cada
duas ou três semanas. Elas envolvem os clientes no processo de desenvolvimento para
obter
feedback rápido sobre a evolução dos requisitos. Assim, minimiza-se a documentação, pois
se
utiliza mais a comunicação informal do que reuniões formais com documentos escritos.

d) São métodos de desenvolvimento incremental em que os incrementos são intermediários
e,
normalmente, as novas versões do sistema são descritas e disponibilizadas aos clientes
a cada
duas ou três semanas. Elas envolvem os desenvolvedores do processo de concepção para
obter
feedback rápido sobre a evolução dos requisitos. Assim, minimiza-se a documentação, pois
se
utiliza mais a comunicação informal do que reuniões formais com documentos escritos.


Comentários:

(a) Errado, não são estáticos - são incrementais; (b) Correto; (c) Errado, não são
estáticos - são
incrementais; (d) Errado, incrementos são pequenos e, não, intermediários; as novas
versões são
criadas e, não, descritas; os clientes participam do processo de
desenvolvimento e, não, os
desenvolvedores participam no processo de concepção.

Gabarito: Letra B

Item. 4. (IESES / SCGás - 2019) Os processos de software podem ser categorizados como
dirigidos a
planos ou processos ágeis. Considerando esta afirmação, assinale a afirmativa correta:

a) Nos processos ágeis todas as atividades são planejadas antecipadamente, e a
avaliação do
processo considera a comparação com um planejamento inicial. Já nos processos dirigido a
planos, o planejamento é gradativo. Esta característica facilita a alteração do processo
de forma
a refletir as necessidades de mudança dos clientes.

b) Nos processos dirigidos a planos todas as atividades são planejadas antecipadamente,
e a
avaliação do processo considera a comparação com um planejamento inicial. Já nos
processos
ágeis, o planejamento é gradativo. Esta característica facilita a alteração do processo
de forma
a refletir as necessidades de mudança dos clientes.

c) Nos processos ágeis todas as atividades são planejadas posteriormente, e a
avaliação do
processo considera a comparação com um planejamento inicial. Já nos processos dirigido a
planos, o planejamento é gradativo. Esta característica facilita a alteração do processo
de forma
a refletir as necessidades de mudança dos clientes.

d) Nos processos dirigidos a planos todas as rotinas são empíricas e, a avaliação do
processo
considera a comparação com um planejamento final a ser definido. Já nos processos
ágeis, o
planejamento é gradativo. Esta característica facilita a alteração do processo de forma
a refletir
as necessidades de mudança dos clientes.

Comentários:

(a) Errado, isso ocorre em modelos dirigidos a planos, como o modelo em cascata; (b)
Correto; (c)
Errado, a questão inverteu os conceitos; (d) Errado, o empirismo é uma característica
dos processos
ágeis.

Gabarito: Letra B

Item. 5. (INSTITUTO AOCP / EMPREL- 2019) E m se tratando de desenvolvimento de software, o
termo qualidade é bastante subjetivo. Entretanto, no desenvolvimento ágil, é claro o conceito


de qualidade. Sabendo disso, assinale a alternativa que apresenta corretamente o
conceito de
qualidade no desenvolvimento ágil.

a) Envolve a documentação do processo e o estabelecimento de práticas para entregar ao
cliente um produto de qualidade.

b) Cumpre os critérios sistêmicos estabelecidos em acordo com o cliente para que os
requisitos
também sejam cumpridos.

c) Tem como objetivo gerar manuais e código claro por meio de uma equipe
especializada no
processo.

d) Cumpre os requisitos para o cliente com uma documentação completa do
produto
desenvolvido.

e) Significa que a qualidade do código e as práticas são utilizadas para garantir um
código de
alta qualidade.

Comentários:

(a) Errado, software em funcionamento é mais valorizado do que documentação abrangente
-e um
indicativo melhor de qualidade; (b) Errado, colaboração com o cliente é mais
valorizado que
negociação e contratos; (c) Errado, metodologias ágeis prezam mais pelo software
funcionando do
que documentação abrangente; (d) Errado, metodologias ágeis prezam mais
pelo software
funcionando do que documentação abrangente; (e) Correto, a qualidade de um software é
medida
baseado na qualidade do código-fonte e das práticas de programação utilizadas.

Gabarito: Letra E

Item. 6. (IF-PE / IF-PE - 2019) O Manifesto Ágil é um documento que encoraja a utilização
de métodos
melhores no desenvolvimento de software. Nele foram escritos doze princípios que
norteiam o
desenvolvimento ágil de sistemas. Um dos princípios mais relevantes é:

a) "A prioridade é satisfazer a equipe de desenvolvimento por meio de uma
entrega única de
software de valor."

b) "A prioridade é satisfazer ao cliente por meio de uma entrega única de software de valor."

c) "A prioridade é satisfazer ao gerente do projeto por meio de entregas contínuas e
frequentes
de software de valor."

d) "A prioridade é satisfazer ao gerente de projetos por meio de uma entrega única
de software
de valor."


e) "A prioridade é satisfazer ao cliente por meio de entregas contínuas e frequentes
de software
de valor."

Comentários:

Nossa maior prioridade é satisfazer o cliente através da entrega contínua e adiantada
e software com valor
agregado.

Gabarito: Letra E

Item. 7. (AJURI / Desenvolve - RR-2018) Desenvolvimento ágil de software (em inglês: Agile
software
development) ou Método ágil é uma expressão que define um conjunto de
metodologias
utilizadas no desenvolvimento de software. As metodologias que fazem parte do conceito
de
desenvolvimento ágil, tal como qualquer metodologia de software, providenciam uma
estrutura
conceituai para reger projetos de engenharia de software. Métodos ágeis
enfatizam
comunicações em tempo real, preferencialmente cara a cara, a documentos escritos. A
maioria
dos componentes de um grupo ágil deve estar agrupada em uma sala. Isso inclui todas
as
pessoas necessárias para terminar o software: no mínimo, os
programadores e seus
clientes(clientes são as pessoas que definem o produto, eles podem ser os gerentes,
analistas
de negócio, ou realmente os clientes). Considerando o contexto dos Valores da
Metodologia
Ágil, é correto afirmar que indivíduos e iterações:

a) mais do que processos e ferramentas; software funcional mais do que
documentação
abrangente; colaboração do cliente menor do que negociação de contratos;
responder a
mudanças menor do que seguirum plano.

b) mais do que processos e ferramentas; software funcional mais do que
documentação
abrangente; colaboração do cliente mais do que negociação de contratos;
responder a
mudanças mais do que seguir um plano.

c) mais do que processos e ferramentas; software funcional menos do que
documentação
abrangente; colaboração do cliente menor do que negociação de contratos;
responder a
mudanças na mesma medida que seguir um plano.

d) mais do que processos e ferramentas; software funcional mais do que
documentação
abrangente; colaboração do cliente na mesma medida que negociação de contratos; responder
a mudanças na mesma medida que seguir um plano.

e) na mesma medida que processos e ferramentas; software funcional menos do
que
documentação abrangente; colaboração do cliente menor do que negociação de
contratos;
responder a mudanças menor do que seguir um plano.


Comentários:

A questão vacila ao dizer no enunciado "indivíduos e iterações" - o correto
seria interações.
Ignorando esse deslize, indivíduos e interações são mais valorizados do que
processos e
ferramentas; software funcional é mais valorizado do que documentação abrangente;
colaboração
do cliente é mais valorizado do que negociação de contratos; responder a
mudanças é mais
valorizado do que seguir um plano.

Gabarito: Letra B

Item. 8. (INSTITUTO AOCP / PRODEB - 2018) Assinale a alternativa que apresenta corretamente
um
dos princípios defendidos pelo Manifesto Ágil.

a) As melhores arquiteturas, requisitos e designs emergem de times com
cronogramas bem
definidos.

b) O método mais eficiente e eficaz de transmitir informações para um time de
desenvolvimento
é através de uma update meeting.

c) Deve-se construir projetos ao redor de estruturas hierárquicas verticais.
Dando a eles o
ambiente e suporte necessário.

d) Pessoas relacionadas a negócios devem trabalhar sem interferência constante ao time
de
desenvolvimento.

e) Em intervalos regulares, o time reflete como ficar mais efetivo, então se ajustam
e otimizam
seu comportamento de acordo.

Comentários:

NÓS SEGUIMOS ESSES PRINCÍPIOS..

Pessoas de negócio e desenvolvedores devem trabalhar diariamente em conjunto portodo o projeto.

Construa projetos em torno de indivíduos motivados. Dê a eles o ambiente e o suporte necessário e
confie neles
para fazer o trabalho.

O método mais eficiente e eficaz de transmitir informações para e entre uma equipe de
desenvolvimento é através
de conversa face a face.

As melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis.

Em intervalos regulares, a equipe reflete sobre como se tornar mais eficaz e então
refina e ajusta seu
comportamento de acordo.

Gabarito: Letra E


9- (INSTITUTO AOCP / PRODEB - 2018) Assinale a alternativa que apresenta uma característica
presente em Equipes ágeis:

a) Equipe grande.

b) Equipe modestamente motivada.

c) Equipe que se auto-organiza.

d) Individualismo e talento.

e) Alto formalismo.

Comentários:

(a) Errado, equipes pequenas; (b) Errado, equipe altamente motivada; (c)
Correto; (d) Errado,
colaboração e talento; (e) Errado, alto empirismo.

Gabarito: Letra C

10.(INSTITUTO AOCP / PRODEB - 2018) Assinale a alternativa correta em relação ao
manifesto
ágil para desenvolvimento de software.

a) Uma documentação detalhada é o método mais eficiente e eficaz de transmitir
informações
para e por dentro de um time de desenvolvimento.

b) Processos ágeis se adéquam a mudanças para que o cliente possa tirar
vantagens
competitivas.

c) Não se deve aceitar mudanças de requisitos no fim do desenvolvimento.

d) Pessoas relacionadas a negócios e desenvolvedores devem manter contato em
reuniões
específicas.

e) Deve-se aceitar mudança de requisitos porém o time deve parar o desenvolvimento e
voltar
à etapa de validação de requisitos.

Comentários:

(a) Errado, o método mais eficiente e eficaz de transmitir informações para e entre
uma equipe de
desenvolvimento é através de conversa face a face; (b) Correto; (c) Errado, mudanças
nos requisitos
são bem-vindas, mesmo tardiamente no desenvolvimento; (d) Errado, pessoas de
negócio e
desenvolvedores devem trabalhar diariamente em conjunto por todo o projeto; (e) Errado,
não é
necessário parar o desenvolvimento.

Gabarito: Letra B


li. (INSTITUTO AOCP / PRODEB - 2018) Com a realização do Manifesto Ágil em 2001 por
um
conjunto de especialistas em processos de desenvolvimento de software, ficaram
definidos
alguns parâmetros principais que passaram a ser um denominador comum de
Metodologias
Ágeis. São características atribuídas aos métodos ágeis, EXCETO:

a) processos e ferramentas ao contrário de pessoas e interações.

b) software executável, ao contrário de documentação extensa e confusa.

c) colaboração do cliente, ao contrário de constantes negociações de contratos.

d) indivíduos e interações mais que processos e ferramentas.

e) respostas rápidas para as mudanças, ao contrário de seguir planos previamente definidos.

Comentários:

(1) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Responder a mudanças acima de seguir fielmente um plano.

Gabarito: Letra A

Item. 12. (FCM / IFN-MG - 2018) O Manifesto Ágil para o Desenvolvimento de Software,
proposto por
Beck, K. et al. (2001), propõe 12 princípios. NÃO correspondem a um desses princípios
criados
por esses autores:

a) as melhores arquiteturas, requisitos e projetos emergem de equipes auto-organizadas.

b) a simplicidade é a arte de maximizara quantidade de trabalho que não precisa serfeito.

c) o projeto para ser ágil precisa ter um controle bem definido sobre as pessoas e
as tarefas que
elas executam.

d) a prioridade é satisfazer o cliente através de entrega antecipada e contínua de um
software
que tenha valor para o mesmo.

e) a entrega do software deve ser feita com uma frequência predeterminada
de tempo,
preferencialmente em uma escala de tempo mais curta.

Comentários:

(a) Correto, as melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis;

(b) Correto, simplicidade-a arte de maximizara quantidade de trabalho não realizado-é essencial;

(c) Errado, esse não é um dos doze princípios ágeis; (d) Errado, nossa maior
prioridade é satisfazer
o cliente através da entrega contínua e adiantada de software com valor agregado; (e) Errado,


entregar frequentemente software funcionando, de poucas semanas a poucos
meses, com
preferência à menor escala de tempo.

Gabarito: Letra C

Item. 13. (CS-UFG / UFG - 2019) O desenvolvimento de software baseado em abordagem ágil estimula:

a) a produção de planos detalhados.

b) a realização de atividades de desenvolvimento em cada iteração.

c) a valorização da equipe de operação em detrimento daquela de desenvolvimento.

d) a aplicação de métodos formais de desenvolvimento de software.

Comentários:

(a) Errado, valoriza-se mais responder a mudanças do que seguir um plano detalhado;
(b) Correto;

(c) Errado, isso não existe; (d) Errado, métodos formais são - como o próprio nome
diz - formais. A
abordagem ágil prega o empirismo e a resposta à mudanças.

Gabarito: Letra B

14.(INSTITUTO AOCP/ ITEP - RN - 2018) Qual das alternativas a seguir
apresenta somente
métodos ágeis de desenvolvimento de software?

a) XP e Scrum.

b) Cascata e XP.

c) Incremental e XP.

d) Evolucionário e Scrum.

e) Incremental e Evolucionário.

Comentários:

(a) Correto; (b) Errado, Cascata é tradicional; (c) Errado, Incremental é
tradicional; (d) Errado,
Evolucionário é tradicional; (e) Errado, ambos são tradicionais.

Gabarito: Letra A

i5.(UECE-CEV / Prefeitura de Sobral - CE - 2018) Escreva V ou F conforme seja
verdadeiro ou
falso o que se afirma nos itens abaixo com respeito ao processo de desenvolvimento
ágil de
software.

( ) Efetuar testes constantemente permite detectar defeitos mais cedo e da
forma menos
custosa possível.


( ) O uso de uma ferramenta robusta de modelagem e uma completa
documentação são
imprescindíveis para o desenvolvimento ágil.

( ) É importante produzir em poucas semanas uma versão inicial do software a fim de
obter
rapidamente uma primeira conquista e um feedback adiantado.

() Novas versões do software devem ser lançadas em intervalos cada vez mais
frequentes, seja
semanalmente, diariamente ou mesmo de hora em hora.

a) V, F, F, V.

b) F, V, FV.

c) V, F, V, F.

d) F, V, V, F.

Comentários:

(V) Efetuar testes constantemente permite detectar defeitos mais cedo e da forma menos
custosa
possível; (F) Valorizam-se mais indivíduos e interações do que processos e ferramentas;
(V) A ideia
é satisfazer o cliente através da entrega contínua e adiantada de software com valor
agregado; (F)
A ideia é entregarfrequentemente software funcionando, de poucas semanas a poucos meses,
com
preferência à menor escala de tempo.

Gabarito: Letra C

16.(CETRO / ANVISA-2013) Com relação aos conceitos do processo ágil, um dos
conceitos-chave
do Manifesto Ágil é :

I. produzir documentação em vez de software executável.

II. a colaboração do cliente em vez da negociação de contratos.

III. obter respostas rápidas a mudanças em vez de seguir planos.

É correto o que está contido em:

a) I, apenas.

b) II, apenas.

c) III, apenas.

d) II e III, apenas.

e) I, lie III.

Comentários:

(I) Errado, software em funcionamento é mais valorizado do que documentação
abrangente; (II)
Correto; (III) Correto.


Gabarito: Letra D

i7.(UNIRIO / UNIRIO - 2014) Dentre os princípios do manifesto ágil para
desenvolvimento de
software, NÃO se inclui (em):

a) a satisfação do cliente deve ser priorizada através da entrega contínua.

b) conversas face a face são preferíveis para e entre uma equipe de desenvolvimento.

c) simplicidade é essencial.

d) mudança nos requisitos devem ser evitadas.

e) entregas de software funcionando devem ser realizadas frequentemente.

Comentários:

(a) Correto, nossa maior prioridade é satisfazer o cliente através da entrega contínua
e adiantada
de software com valor agregado; (b) Correto, o método mais eficiente e
eficaz de transmitir
informações para e entre uma equipe de desenvolvimento é através de conversa face a
face; (c)
Correto, simplicidade - a arte de maximizar a quantidade de trabalho não realizado - é essencial;

(d) Errado, mudanças nos requisitos são bem-vindas, mesmo tardiamente no
desenvolvimento; (e)
Correto, entregar frequentemente software funcionando, de poucas semanas a poucos
meses,
com preferência à menor escala de tempo.

Gabarito: Letra D

i8.(FCM / IF-RS - 2016) As metodologias ágeis tornaram-se populares em 2001 quando um
grupo
de especialistas em processos de desenvolvimento de software decidiu se reunir nos
Estados
Unidos. O objetivo foi discutir maneiras de melhorar o desempenho de seus projetos.
Embora
tivessem preferências e métodos distintos entre si, concordaram que um pequeno conjunto
de
princípios sempre parecia ter sido respeitado quando os projetos davam certo. Foi então
criada
a Aliança Ágil e o estabelecimento do Manifesto Ágil, contendo os conceitos e os
princípios
comuns compartilhados portodos esses métodos.

NÃO é considerado um princípio portrás do Manifesto Ágil:

a) Responder a mudanças mais que seguir um plano.

b) Colaboração com o cliente mais que negociação de contratos.

c) Processos e ferramentas mais que indivíduos e interação entre eles.

d) Software em funcionamento mais que documentação abrangente.

e) Indivíduos e interação entre eles mais que processos e ferramentas.

Comentários:


(í) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Respondera mudanças acima de seguirfielmente um plano.

Gabarito: Letra C

ig.(FUNCAB / MJ-SP - 2015) O manifesto ágil considera que a medida primária de progresso é:

a) tempo utilizado.

b) quantidadede testes.

c) quantidadede documentação.

d) custo realizado.

e) software funcionando.

Comentários:

De acordo com o 70 princípio ágil: software funcionando é a medida primária de progresso.

Gabarito: Letra E

2o.(UECE-CEV / FUNCEME - 2018) O Manifesto para o desenvolvimento ágil de software
resume
os itens mais valorizados pelos praticantes desta abordagem. Considerando os itens
listados a
seguir, assinale a opção que NÃO representa um valor ágil segundo o Manifesto.

a) indivíduos e interações mais que processos e ferramentas

b) seguir um plano mais que responder a mudanças

c) software em funcionamento mais que documentação abrangente

d) colaboração com o cliente mais que negociação de contratos

Comentários:

(1) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Responder a mudanças acima de seguir fielmente um plano.

Gabarito: Letra B

2i.(ESAF / MF - 2013) O desenvolvimento ágil de software fundamenta-se no
Manifesto Ágil.

Segundo ele deve-se valorizar:

a) mudança de respostas em vez do seguimento de um plano.

b) indivíduos e interações em vez de processos e ferramentas.

c) documentação extensiva operacional em vez de software funcional.


d) indivíduos e intenções junto a processos e ferramentas.

e) seguimento de um plano em vez de resposta a mudança.

Comentários:

(i) Indivíduos e interações acima de processos e ferramentas; (2) Software em
funcionamento
acima de documentação abrangente; (3) Colaboração com o cliente acima de
negociação de
contratos; (4) Respondera mudanças acima de seguirfielmente um plano.

Gabarito: Letra B

Item. 22. (IF-PE / IF-PE - 2016) Sobre o documento conhecido como "manifesto ágil", é
CORRETO dizer
que:

a) prega uma extensa lista de documentos, processos, atores, métodos e diagramas
visando
fornecer alta agilidade.

b) lista e cataloga a maioria dos métodos vigentes à época de sua criação,
classificando cada um
como "ágil" ou "burocrático".

c) foi criado como base para descrever as principais ideias e práticas que eram
comuns a muitos
dos métodos considerados ágeis e que já existiam na época.

d) foi criado com base na ideia de que se tudo for muito bem controlado e
documentado, os
processos serão naturalmente ágeis.

e) a partir dele, foram definidos o XP, o scrum, o crystal, o CMM e o RUP, cada
um com suas
características particulares.

Comentários:

(a) Errado, prega software em funcionamento mais do que documentações
abrangentes ; (b)
Errado, esse item não faz qualquer sentido; (c) Correto; (d) Errado,
prega software em
funcionamento mais do que documentações abrangentes; (e) Errado, todos esses
métodos já
existiam antes do manifesto ágil.

Gabarito: Letra C

23.(CS-UFG / UFG - 2018) Ao se empregar métodos ágeis em desenvolvimento de software,
as
atividades:

a) são planejadas com antecedência, e seu progresso é medido em
relação ao plano
estabelecido.


b) são realizadas com base na abordagem iterativa/incremental de desenvolvimento.

c) são planejadas com base no modelo cascata, com fases separadas e distintas de
especificação
e desenvolvimento.

d) são realizadas em fases sequenciais, sendo que cada fase precisa estar completa antes
que se
passe para a próxima.

Comentários:

(a) Errado, software funcionando é a medida primária de progresso - valoriza-se mais a
resposta a
mudanças do que seguir um plano; (b) Correto; (c) Errado, modelo em cascata
utiliza uma
abordagem tradicional e, não, ágil; (d) Errado, são realizadas de forma iterativa e incremental.

Gabarito: Letra B

24.(CESGRANRIO / Banco da Amazônia - 2018) O Manifesto Ágil se tornou um
marco da
Engenharia de Software, chamando a atenção de que vários processos propostos
de forma
independente tinham valores em comum. Além disso, foram definidos 12 princípios. Entre
eles,
figura o seguinte princípio:

a) cada pessoa em um projeto deve ter sua função predeterminada para
acelerar o
desenvolvimento em conjunto.

b) a contínua atenção à simplicidade do trabalho feito aumenta a agilidade.

c) software funcionando é a medida primária de progresso.

d) os indivíduos, clientes e desenvolvedores, são mais importantes que processos e ferramentas.

e) o software funcional emerge de times auto-organizáveis.

Comentários:

Nenhum desses faz parte dos doze princípios, exceto: software funcionando é a medida
primária
de progresso.

Gabarito: Letra C

Item. 25. (IADES / ARCON-PA - 2018) Embora esses métodos ágeis sejam todos baseados na
noção de
desenvolvimento e entrega incremental, eles propõem diferentes processos para
alcançar tal
objetivo. No entanto, compartilham um conjunto de princípios, com base no manifesto
ágil, e
por isso têm muito em comum.

SOMMERVILLE, I. Engenharia de software. 9. ed. São Paulo: Person Education, 2011.

Os cinco princípios citados no texto são:


a) envolvimento do cliente; entregas agendadas; pessoas e processos são
igualmente
importantes; aceitar mudanças; e manter a simplicidade.

b) envolvimento do cliente; entrega incremental; pessoas, não processos; aceitar as
mudanças;
e manter a simplicidade.

c) envolvimento do cliente apenas no início; entrega incremental; prazos
rígidos; evitar
mudanças; e manter a equipe.

d) programadores em primeiro lugar; ausência de prazos; cliente como última
prioridade;
aceitar as mudanças; e investir em controle de versão.

e) programadores em primeiro lugar; entrega por protótipos; processos, não pessoas;
aceitar as
mudanças; e manter o cronograma.

Comentários:

(a) Errado. Envolvimento do cliente; entregas agendadas; pessoas e processos
são igualmente
importantes; aceitar mudanças; e manter a simplicidade;

(b) Correto. Envolvimento do cliente; entrega incremental; pessoas, não
processos; aceitar as
mudanças; e manter a simplicidade.

(c) Errado. Envolvimento do cliente apenas no início; entrega incremental;
prazos rígidos; evitar
mudanças; e manter a equipe.

(d) Errado. Programadores em primeiro lugar; ausência de prazos; cliente como última
prioridade;
aceitar as mudanças; e investir em controle de versão.

(e) Errado. Programadores em primeiro lugar; entrega por protótipos; processos,
não pessoas;
aceitar as mudanças; e manter o cronograma.

Gabarito: Letra B

26.(FAURGS / TJ-RS - 2018) Considere as seguintes afirmações sobre princípios
dos métodos
ágeis.

I - Os clientes devem estar totalmente envolvidos no processo de desenvolvimento. Seu
papel é
fornecer e priorizar novos requisitos do sistema e avaliar suas iterações.

II - Embora as habilidades da equipe devam ser reconhecidas e exploradas, seus membros
não
devem desenvolver maneiras próprias de trabalhar, podendo o processo ser prescritivo.


III- Deve-se ter em mente que os requisitos do sistema irão mudar, por isso, o
sistema deve ser
projetado de maneira a acomodar essas mudanças.

Quais estão corretas?

a) Apenas I.

b) Apenas I e II.

c) Apenas I e III.

d) Apenas II e III.

e) I, lie III.

Comentários:

(I) Correto, pessoas de negócio e desenvolvedores devem trabalhar diariamente em
conjunto por
todo o projeto; (II) Errado, as melhores arquiteturas, requisitos e designs emergem de
equipes auto-
organizáveis da maneira que se sentirem mais adequados; (III) Correto, mudanças nos
requisitos
são bem-vindas, mesmo tardiamente no desenvolvimento.

Gabarito: Letra C


LISTA DE QUESTõES - CESPE

í. (CESPE / BANRISUL - 2022) O modelo ágil não pode ser aplicado a qualquer processo
de
software, pois, para tanto, é necessário que o processo seja projetado de
modo que suas
características sejam modeladas como componentes e, em seguida, construídas
dentro do
contexto da arquitetura do sistema.

Item. 2. (CESPE / Petrobrás - 2022) Entre as principais características dos métodos ágeis,
destacam-se
a maximização da documentação formal e o envolvimento dos clientes.

Item. 3. (CESPE / TCE-ES - 2012) E m virtude de as metodologias ágeis gerarem
excessiva
documentação, a gestão do conhecimento depende diretamente dos
programadores
envolvidos no projeto.

Item. 4. (CESPE/ EBC-2011) O que os métodos ágeis buscam é como evitaras mudanças desde o
início
do projeto e não a melhor maneira de tratar essas mudanças.

Item. 5. (CESPE / BASA - 2010) Desenvolvimento ágil de software (Agile Software
Development) ou
método ágil é aplicado, principalmente, a grandes corporações, uma vez que permite
produzir
grandes sistemas de forma ágil.

Item. 6. (CESPE/TCU-2010) A agilidade não pode ser aplicada a todo e qualquer processo de software.

Item. 7. (CESPE / UNIPAMPA - 2009) XP, Scrum e Cristal são exemplos de
modelos ágeis de
desenvolvimento de sistemas.

Item. 8. (CESPE/EBC-2011) Considerando o conceito de metodologia ágil em apreço, é correto
afirmar
que as seguintes metodologias são ágeis: XP (Extreme Programming), Scrum,
Crystal, FDD
(Feature Driven Development), DSDM (Dynamic Systems Development Method) e Open Source
Software Development.

Item. 9. (CESPE / CNJ - 2013 O desenvolvimento ágil de sistemas consiste em uma linguagem
de
modelagem que permite aos desenvolvedores visualizarem os produtos de seu
trabalho em
gráficos padronizados.

Item. 10. (CESPE / EBC - 2011) É conveniente que o contrato, entre cliente e
fornecedor, para o
desenvolvimento de um sistema computacional, contenha a lista de requisitos para o
software.
Contudo, os métodos ágeis de desenvolvimento preconizam que o referido contrato
estabeleça
o preço, a ser pago pelo cliente, com base no tempo necessário para o desenvolvimento
do
sistema e não com base no conjunto de requisitos.


íi. (CESPE / MPOG - 2015) Metodologias de desenvolvimento ágil enfocam atividades de
projeto
e implementação, desconsiderando as atividades de elicitação de requisitos e a produção
de
documentação.

Item. 12. (CESPE / TRE-PI - 2008) No que se refere a métodos ágeis de desenvolvimento de
sistemas,
assinale a opção correta.

a) A aplicação de método ágil para desenvolvimento de grandes sistemas pode
enfrentar
dificuldades que o tornem inviável.

b) O documento de requisitos, apesar de abordar um conjunto pequeno de
funcionalidades,
deve especificar toda a necessidade do usuário.

c) O sistema é construído em pequenos blocos, que irão compor uma versão a ser
entregue aos
usuários.

d) A documentação de projeto deve ser feita pelo próprio desenvolvedor,
seguindo padrões
simplificados.

e) Para atingir os objetivos de agilidade exigidos, os desenvolvedores devem seguir
processos
simplificados para a construção do software.

Item. 13. (CESPE ITCE-PR - 2016) Os métodos ágeis para o desenvolvimento de software
representam
uma evolução da engenharia de software tradicional, uma vez que são aplicáveis a todos
os tipos
de projetos, produtos, pessoas e situações.

Item. 14. (CESPE / TCE-PR - 2016) Um dos princípios de agilidade da Agile Alliance dispõe
que a entrega
completa de um software garante a satisfação do cliente.

Item. 15. (CESPE / Ministério da Economia - 2020) Os modelos ágeis de
desenvolvimento
de software dão grande ênfase às definições de atividades e aos processos e pouca
ênfase à
pragmática e ao fator humano.

Item. 16. (CESPE / MEC -2015) Acataras mudanças de requisitos, ainda que o desenvolvimento
já esteja
avançado, é um dos princípios do Manifesto Ágil.

Item. 17. (CESPE / TRT17 - 2013) Em um desenvolvimento ágil que segue o manifesto ágil,
não se deve
aceitar mudanças de requisitos, mesmo no fim do desenvolvimento. Processos ágeis não se
adequam a mudanças não planejadas.

Item. 18. (CESPE / EBSERH - 2018) Nas metodologias de desenvolvimento ágeis,
mudanças em
requisitos são bem recebidas, mesmo em fases mais avançadas do desenvolvimento.


GABARITo

Item. 1. ERRADO 7- CORRETO
13- ERRADO

Item. 2. ERRADO 8. CORRETO
14- ERRADO

3- ERRADO 9- ERRADO
15- ERRADO

4- ERRADO 10. CORRETO
Item. 16. CORRETO

5- ERRADO íi. ERRADO
17- ERRADO

Item. 6. ERRADO 12. LETRA A
Item. 18. CORRETO


LISTA DE QUESTõES - FCC

í. (FCC / SEFAZ-AP - 2022) Dentre os doze Princípios do Manifesto Ágil, incluem-se:

a) funcionalidade, satisfação do cliente e trabalho em conjunto.

b) respeito ao cliente, economia de recursos e paralelismo.

c) resiliência, motivação e trabalho em pares.

d) simplicidade, motivação e paralelismo.

e) especificidade, longevidade do software e prazos curtos.

Comentários:

Os 12 Princípios Ágeis


Satisfaça o
consumidor

Confie
e apoie

Atenção
continua

Aceite bem
mudanças

Conversas
face a face

Mantenha a
simplicidade

Entregas
frequentes

Softwares
funcionando

Times

auto-organizados

Trabalhe em
conjunto

Desenvolvimento
sustentável

Refletir
e ajustar

Trata-se de funcionalidade (software funcionando), satisfação do cliente (satisfaça
o consumidor)
e trabalho em conjunto.

Gabarito: Letra A


GABARITo

Item. 1. LETRA A


LISTA DE QUESTõES - FCV

í. (FGV/ IMBEL-2021) Com referência aos valores do The Agile Manifesto, analise as
afirmativas
a seguir.

I. Processos e ferramentas mais que indivíduos e interação entre eles.

II. Software em funcionamento mais que documentação abrangente.

III. Colaboração do cliente mais que negociação de contratos.

IV. Seguir um plano mais que responder a mudanças.

Está correto o que se afirma em:

a) I e II, somente

b) II e III, somente.

c) III e IV, somente.

d) I e IV, somente.

e) II e IV, somente.

Item. 2. (FGV / MPE-MS- 2013) Considerando a caracterização de agilidade
e processo de
desenvolvimento ágil, segundo Pressman, analise as afirmativas a seguir.

I. Um processo ágil de software deve ser incrementalmente adaptável.

II. Um processo ágil de software permite que as pessoas e a equipe se moldem a ele
com
facilidade.

III. Os conceitos ágeis são efetivos, pois diminuem a imprevisibilidade sistêmica ao
enfatizar
entregas em prazos curtos.

a) se somente a afirmativa I estiver correta.

b) se somente a afirmativa II estiver correta.

c) se somente a afirmativa III estiver correta.

d) se somente as afirmativas I e II estiverem corretas.

e) se todas as afirmativas estiverem corretas.

Item. 3. (FGV / PGE-RO - 2015) Durante 5 anos gerenciando o desenvolvimento de
sistemas de
informação, Claudia teve que lidar com diversas insatisfações de seus usuários pois os
sistemas
não atendiam as suas necessidades. Claudia decidiu, então, implantar métodos
ágeis de
desenvolvimento e definiu os seguintes princípios:

I. Mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento.


II. O método mais eficiente e eficaz de transmitir informações para e entre uma
equipe de
desenvolvimento é através da documentação.

III. Simplicidade é essencial.

Dentre os princípios definidos por Claudia, o que infringe os princípios do
manifesto para
Desenvolvimento Ágil de Software é o que se afirma em:

a) somente I;

b) somente II;

c) somente III;

d) somente I e III;

e) I, lie III.

Item. 4. (FGV/ TJ-RO - 2015) O manifesto ágil tem por princípio que:

a) mudanças nos requisitos são bem-vindas, mesmo tardiamente no desenvolvimento;

b) a contínua atenção à excelência técnica reduz a agilidade;

c) a redução do backlog é a medida primária de progresso;

d) as melhores arquiteturas, requisitos e designs emergem de equipes que possuem um
bom
líder;

e) pessoas de negócio e desenvolvedores devem trabalhar em ambientes separados para
reduzir
as interferências no processo de desenvolvimento.

Item. 5. (FGV / TJ-GO - 2014) Escreva O Manifesto Ágil lista valores seguidos por
desenvolvedores com
a finalidade de melhorar a maneira pela qual o software é desenvolvido. A alternativa
que se
encontra no manifesto é:

a) seguir um plano mais que responder a mudanças;

b) indivíduos e interações mais que processos e ferramentas;

c) documentação abrangente mais que software em funcionamento;

d) negociação de contratos mais que colaboração com o cliente;

e) negociação de contratos mais que indivíduos e interações.

Item. 6. (FGV / Câmara Municipal de Caruaru-PE - 2015) O desenvolvimento ágil de software é
guiado
por metodologias que compartilham um conjunto comum de valores e de princípios, conforme
definido pelo Manifesto Ágil. Assinale a opção que indica um princípio do desenvolvimento ágil.

a) As mudanças nos requisitos devem ocorrer dentro do quadro de tempo estabelecido
para a
iteração.


b) O método mais eficiente e eficaz de transmitir informações para e entre uma
equipe de
desenvolvimento é por meio de conversa face a face.

c) Os intervalos regulares devem ser evitados para tornar a equipe mais eficaz e
maximizar a
quantidade de trabalho realizado.

d) As pessoas de negócio e desenvolvedores devem interagirsomente no início de cada iteração.

e) A entrega contínua e adiantada de software, mesmo que o conjunto de
funcionalidades
desenvolvidas não agregue valor, deve serfeita para satisfazer o cliente.

Item. 7. (FGV / PROCEMPA-2014) O Manifesto Ágil é uma declaração de princípios que fundamentam
o desenvolvimento ágil de software. A respeito desses princípios, assinale a afirmativa correta:

a) As melhores arquiteturas, requisitos e designs emergem de equipes
lideradas pelo
profissional mais sênior.

b) Em intervalos regulares, a equipe reflete sobre como se tornar mais eficaz e
então refina e
ajusta seu comportamento de acordo.

c) Pessoas de negócio e desenvolvedores devem trabalhar separadamente portodo o projeto.

d) Entregar software quando há poucas semanas de desenvolvimento deve serevitado para
não
afetar a satisfação do cliente.

e) Mudanças nos requisitos são bem-vindas, desde que não impactem o desenvolvimento.

Item. 8. (FGV / DPE-RO - 2015) O Manifesto Ágil é uma declaração que reúne os princípios e práticas
que fundamentam o desenvolvimento ágil de software. É um dos princípios desse manifesto:

a) defeitos no software são a medida primária de progresso;

b) pessoas de negócio e desenvolvedores devem trabalhar isoladamente e se reunir
somente ao
final de cada iteração para validação do software;

c) atenção contínua à excelência técnica deve ser evitada para não afetar a agilidade
uma vez
que simplicidade é essencial;

d) os patrocinadores, desenvolvedores e usuários devem ser capazes de manter
um ritmo
constante indefinidamente evitando interrupções e intervalos regulares;

e) as melhores arquiteturas, requisitos e designs emergem de equipes auto-organizáveis.


g. (FGV / BANESTES - 2018) Um dos valores relacionados ao ambiente ágil de
desenvolvimento
e:

a) documentação abrangente mais que software funcional;

b) negociação de contratos mais que colaboração do cliente;

c) processos e ferramentas mais que indivíduos e iterações;

d) rapidez na construção mais que excelência técnica;

e) responder a mudanças mais que seguir um plano.

Item. 10. (FGV / BANESTES - 2018) Com relação aos valores relacionados ao desenvolvimento
ágil de
software, NÃO se pode incluir:

a) colaboração do cliente mais que negociação de contratos;

b) indivíduos e iterações mais que processos e ferramentas;

c) rapidez na construção mais que excelência técnica;

d) responder a mudanças mais que seguir um plano;

e) software funcional mais que documentação abrangente.

Item. 11. (FGV / AL-RO - 2018) Para o desenvolvimento do Sistema de Informações ao Cidadão
(SIC), foi
decidida a utilização de uma metodologia ágil. Segundo o Manifesto Ágil, esta decisão
indica
que foi dado maior valor:

a) aos processos e ferramentas.

b) à resposta a modificações.

c) à documentação abrangente.

d) à negociação do contrato.

e) ao cumprimento do plano.


GABARITo

Item. 1. LETRA B 5- LETRA B
9- LETRA E

Item. 2. LETRA A 6. LETRA B
Item. 10. LETRAC

3- LETRA B 7- LETRA B
íi. LETRA B

4- LETRA A 8. LETRA E


LISTA DE QUESTõES - DIvERSAS BANCAS

í. (FADESP/ UEPA - 2020) Um dos princípios do Manifesto Ágil é o de que
os indivíduos e
interações são mais importantes que processos e ferramentas. Um outro princípio é o de que:

a) o usuário é a principal fonte de informação de requisitos de software.

b) os contratos são mais importantes que a colaboração com os clientes.

c) o software funcionando é mais importante do que a documentação completa e detalhada.

d) seguir o plano inicial é mais importante que a adaptação a mudanças.

Item. 2. (IESES/SCGás-2019) A filosofia portrás dos métodos ágeis é refletida no manifesto
ágil, que
foi acordado por muitos dos principais desenvolvedores desses métodos. Assinale a
alternativa
correta que contêm os itens deste manifesto.

a) "Estamos descobrindo melhores maneiras de desenvolver softwares, fazendo-o e ajudando
outros a fazê-lo. Através desse trabalho, valorizamos mais: Indivíduos e
interações do que
processos e ferramentas; Software em funcionamento do que documentação abrangente;
Colaboração do cliente do que negociação de contrato; Respostas a mudanças do que
seguir um
plano. Ou seja, embora itens à direita sejam importantes, valorizamos mais os que
estão à
esquerda".

b) "Estamos descobrindo melhores maneiras de desenvolver softwares, fazendo-o e ajudando
outros a fazê-lo. Através desse trabalho, valorizamos mais: A concorrência e o
desenvolvimento
da competitividade entre as empresas; Software em funcionamento do que
documentação
abrangente; Colaboração do cliente do que negociação de contrato; Respostas a mudanças
do
que seguir um plano. Ou seja, embora itens à direita sejam importantes, valorizamos
mais os
que estão à esquerda".

c) "Estamos descobrindo melhores maneiras de desenvolver softwares, fazendo-o e
ajudando
outros a fazê-lo. Através desse trabalho, valorizamos mais: Indivíduos e
interações do que
processos e ferramentas; Software em funcionamento do que documentação abrangente;
Colaboração da equipe de desenvolvedores do que negociação de contrato e clientes;
Respostas
a mudanças do que seguir um plano. Ou seja, embora itens à direita sejam
importantes,
valorizamos mais os que estão à esquerda".

d) "Estamos descobrindo melhores maneiras de vender softwares, fazendo-o e ajudando
outros
a fazê-lo. Através desse trabalho, valorizamos mais: Indivíduos e interações do que
processos e
ferramentas; Software para mobiles e, em funcionamento do que documentação
abrangente;
Colaboração do cliente do que negociação de contrato; Respostas a mudanças do que
seguir um
plano. Ou seja, embora itens à direita sejam importantes, valorizamos mais os que
estão à
esquerda".


3- (IESES /SCGás-2019) Identifique a opção correta para conceituar desenvolvimentos ágeis ou,
que caracterizam métodos ágeis:

a) São métodos de desenvolvimento estáticos em que os incrementos são
dinâmicos e,
normalmente, as novas versões do sistema são criadas e disponibilizadas aos clientes a
cada
duas ou três semanas. Elas não envolvem os clientes no processo de desenvolvimento
para obter
feedback rápido sobre a evolução dos requisitos. Assim, minimiza-se a documentação, pois
se
utiliza mais a comunicação informal do que reuniões formais com documentos escritos.

b) São métodos de desenvolvimento incremental em que os incrementos são
pequenos e,
normalmente, as novas versões do sistema são criadas e disponibilizadas aos clientes a
cada
duas ou três semanas. Neles envolvemos clientes no processo de desenvolvimento para
obter
feedback rápido sobre a evolução dos requisitos. Assim, minimiza-se a documentação, pois
se
utiliza mais a comunicação informal do que reuniões formais com documentos escritos.

c) São métodos de desenvolvimento estáticos em que os incrementos são
pequenos e,
normalmente, as novas versões do sistema são criadas e disponibilizadas aos clientes a
cada
duas ou três semanas. Elas envolvem os clientes no processo de desenvolvimento para
obter
feedback rápido sobre a evolução dos requisitos. Assim, minimiza-se a documentação, pois
se
utiliza mais a comunicação informal do que reuniões formais com documentos escritos.

d) São métodos de desenvolvimento incremental em que os incrementos são intermediários
e,
normalmente, as novas versões do sistema são descritas e disponibilizadas aos clientes
a cada
duas ou três semanas. Elas envolvem os desenvolvedores do processo de concepção para
obter
feedback rápido sobre a evolução dos requisitos. Assim, minimiza-se a documentação, pois
se
utiliza mais a comunicação informal do que reuniões formais com documentos escritos.

Item. 4. (IESES / SCGás- 2019) Os processos de software podem ser categorizados como dirigidos a
planos ou processos ágeis. Considerando esta afirmação, assinale a afirmativa correta:

a) Nos processos ágeis todas as atividades são planejadas antecipadamente, e a
avaliação do
processo considera a comparação com um planejamento inicial. Já nos processos dirigido a
planos, o planejamento é gradativo. Esta característica facilita a alteração do processo
de forma
a refletir as necessidades de mudança dos clientes.

b) Nos processos dirigidos a planos todas as atividades são planejadas antecipadamente,
e a
avaliação do processo considera a comparação com um planejamento inicial. Já nos
processos
ágeis, o planejamento é gradativo. Esta característica facilita a alteração do processo
de forma
a refletir as necessidades de mudança dos clientes.

c) Nos processos ágeis todas as atividades são planejadas posteriormente, e a
avaliação do
processo considera a comparação com um planejamento inicial. Já nos processos
dirigido a
planos, o planejamento é gradativo. Esta característica facilita a alteração do processo
de forma
a refletir as necessidades de mudança dos clientes.


d) Nos processos dirigidos a planos todas as rotinas são empíricas e, a avaliação do
processo
considera a comparação com um planejamento final a ser definido. Já nos processos
ágeis, o
planejamento é gradativo. Esta característica facilita a alteração do processo de forma
a refletir
as necessidades de mudança dos clientes.

Item. 5. (INSTITUTO AOCP / EMPREL-2019) Em se tratando de desenvolvimento de
software, o
termo qualidade é bastante subjetivo. Entretanto, no desenvolvimento ágil, é claro o
conceito
de qualidade. Sabendo disso, assinale a alternativa que apresenta corretamente o
conceito de
qualidade no desenvolvimento ágil.

a) Envolve a documentação do processo e o estabelecimento de práticas para entregar
ao
cliente um produto de qualidade.

b) Cumpre os critérios sistêmicos estabelecidos em acordo com o cliente para que os
requisitos
também sejam cumpridos.

c) Tem como objetivo gerar manuais e código claro por meio de uma equipe
especializada no
processo.

d) Cumpre os requisitos para o cliente com uma documentação completa do
produto
desenvolvido.

e) Significa que a qualidade do código e as práticas são utilizadas para garantir
um código de
alta qualidade.

Item. 6. (IF-PE / IF-PE - 2019) O Manifesto Ágil é um documento que encoraja a utilização
de métodos
melhores no desenvolvimento de software. Nele foram escritos doze princípios que
norteiam o
desenvolvimento ágil de sistemas. Um dos princípios mais relevantes é:

a) "A prioridade é satisfazer a equipe de desenvolvimento por meio de uma
entrega única de
software de valor."

b) "A prioridade é satisfazer ao cliente por meio de uma entrega única de software de valor."

c) "A prioridade é satisfazer ao gerente do projeto por meio de entregas contínuas e
frequentes
de software de valor."

d) "A prioridade é satisfazer ao gerente de projetos por meio de uma entrega única
de software
de valor."

e) "A prioridade é satisfazer ao cliente por meio de entregas contínuas e frequentes
de software
de valor."


7- (AJURI / Desenvolve - RR - 2018) Desenvolvimento ágil de software (em inglês:
Agile software
development) ou Método ágil é uma expressão que define um conjunto de
metodologias
utilizadas no desenvolvimento de software. As metodologias que fazem parte do conceito
de
desenvolvimento ágil, tal como qualquer metodologia de software, providenciam uma
estrutura
conceituai para reger projetos de engenharia de software. Métodos ágeis
enfatizam
comunicações em tempo real, preferencialmente cara a cara, a documentos escritos. A
maioria
dos componentes de um grupo ágil deve estar agrupada em uma sala. Isso inclui todas
as
pessoas necessárias para terminar o software: no mínimo, os
programadores e seus
clientes(clientes são as pessoas que definem o produto, eles podem ser os gerentes,
analistas
de negócio, ou realmente os clientes). Considerando o contexto dos Valores da
Metodologia
Ágil, é correto afirmar que indivíduos e iterações:

a) mais do que processos e ferramentas; software funcional mais do que
documentação
abrangente; colaboração do cliente menor do que negociação de contratos;
responder a
mudanças menor do que seguirum plano.

b) mais do que processos e ferramentas; software funcional mais do que
documentação
abrangente; colaboração do cliente mais do que negociação de contratos;
responder a
mudanças mais do que seguir um plano.

c) mais do que processos e ferramentas; software funcional menos do que
documentação
abrangente; colaboração do cliente menor do que negociação de contratos;
responder a
mudanças na mesma medida que seguir um plano.

d) mais do que processos e ferramentas; software funcional mais do que
documentação
abrangente; colaboração do cliente na mesma medida que negociação de contratos; responder
a mudanças na mesma medida que seguir um plano.

e) na mesma medida que processos e ferramentas; software funcional menos do
que
documentação abrangente; colaboração do cliente menor do que negociação de
contratos;
responder a mudanças menor do que seguir um plano.

Item. 8. (INSTITUTO AOCP / PRODEB - 2018) Assinale a alternativa que apresenta corretamente
um
dos princípios defendidos pelo Manifesto Ágil.

a) As melhores arquiteturas, requisitos e designs emergem de times com
cronogramas bem
definidos.

b) O método mais eficiente e eficaz de transmitir informações para um time de
desenvolvimento
é através de uma update meeting.

c) Deve-se construir projetos ao redor de estruturas hierárquicas verticais.
Dando a eles o
ambiente e suporte necessário.


d) Pessoas relacionadas a negócios devem trabalhar sem interferência constante ao time
de
desenvolvimento.

e) Em intervalos regulares, o time reflete como ficar mais efetivo, então se ajustam
e otimizam
seu comportamento de acordo.

Item. 9. (INSTITUTO AOCP / PRODEB - 2018) Assinale a alternativa que apresenta uma
característica
presente em Equipes ágeis:

a) Equipe grande.

b) Equipe modestamente motivada.

c) Equipe que se auto-organiza.

d) Individualismo e talento.

e) Alto formalismo.

Item. 10. (INSTITUTO AOCP / PRODEB - 2018) Assinale a alternativa correta em relação ao
manifesto
ágil para desenvolvimento de software.

a) Uma documentação detalhada é o método mais eficiente e eficaz de transmitir
informações
para e por dentro de um time de desenvolvimento.

b) Processos ágeis se adéquam a mudanças para que o cliente possa tirar
vantagens
competitivas.

c) Não se deve aceitar mudanças de requisitos no fim do desenvolvimento.

d) Pessoas relacionadas a negócios e desenvolvedores devem manter contato em
reuniões
específicas.

e) Deve-se aceitar mudança de requisitos porém o time deve parar o desenvolvimento e
voltar
à etapa de validação de requisitos.

Item. 11. (INSTITUTO AOCP / PRODEB - 2018) Com a realização do Manifesto Ágil em 2001 por
um
conjunto de especialistas em processos de desenvolvimento de software, ficaram
definidos
alguns parâmetros principais que passaram a ser um denominador comum de
Metodologias
Ágeis. São características atribuídas aos métodos ágeis, EXCETO:

a) processos e ferramentas ao contrário de pessoas e interações.

b) software executável, ao contrário de documentação extensa e confusa.

c) colaboração do cliente, ao contrário de constantes negociações de contratos.

d) indivíduos e interações mais que processos e ferramentas.

e) respostas rápidas para as mudanças, ao contrário de seguir planos previamente definidos.


Item. 12. (FCM/ IFN-MG - 2018) O Manifesto Ágil para o Desenvolvimento de Software, proposto
por
Beck, K. et al. (2001), propõe 12 princípios. NÃO correspondem a um desses princípios
criados
por esses autores:

a) as melhores arquiteturas, requisitos e projetos emergem de equipes auto-organizadas.

b) a simplicidade é a arte de maximizara quantidade de trabalho que não precisa serfeito.

c) o projeto para ser ágil precisa ter um controle bem definido sobre as pessoas e
as tarefas que
elas executam.

d) a prioridade é satisfazer o cliente através de entrega antecipada e contínua de um
software
que tenha valor para o mesmo.

e) a entrega do software deve ser feita com uma frequência predeterminada
de tempo,
preferencialmente em uma escala de tempo mais curta.

Item. 13. (CS-UFG / UFG - 2019) O desenvolvimento de software baseado em abordagem ágil estimula:

a) a produção de planos detalhados.

b) a realização de atividades de desenvolvimento em cada iteração.

c) a valorização da equipe de operação em detrimento daquela de desenvolvimento.

d) a aplicação de métodos formais de desenvolvimento de software.

Item. 14. (INSTITUTO AOCP/ ITEP - RN - 2018) Qual das alternativas a seguir
apresenta somente
métodos ágeis de desenvolvimento de software?

a) XP e Scrum.

b) Cascata e XP.

c) Incremental e XP.

d) Evolucionário e Scrum.

e) Incremental e Evolucionário.

Item. 15. (UECE-CEV / Prefeitura de Sobral - CE - 2018) Escreva V ou F conforme seja
verdadeiro ou
falso o que se afirma nos itens abaixo com respeito ao processo de desenvolvimento
ágil de
software.

( ) Efetuar testes constantemente permite detectar defeitos mais cedo e da
forma menos
custosa possível.

( ) O uso de uma ferramenta robusta de modelagem e uma completa
documentação são
imprescindíveis para o desenvolvimento ágil.


() É importante produzir em poucas semanas uma versão inicial do software a fim de
obter
rapidamente uma primeira conquista e um feedback adiantado.

() Novas versões do software devem ser lançadas em intervalos cada vez mais
frequentes, seja
semanalmente, diariamente ou mesmo de hora em hora.

a) V, F, F, V.

b) F, V, FV.

c) V, F, V, F.

d) F, V, V, F.

Item. 16. (CETRO / ANVISA-2013) Com relação aos conceitos do processo ágil, um dos
conceitos-chave
do Manifesto Ágil é :

I. produzir documentação em vez de software executável.

II. a colaboração do cliente em vez da negociação de contratos.

III. obter respostas rápidas a mudanças em vez de seguir planos.

É correto o que está contido em:

a) I, apenas.

b) II, apenas.

c) III, apenas.

d) II e III, apenas.

e) I, lie III.

Item. 17. (UNIRIO / UNIRIO - 2014) Dentre os princípios do manifesto ágil para
desenvolvimento de
software, NÃO se inclui (em):

a) a satisfação do cliente deve ser priorizada através da entrega contínua.

b) conversas face a face são preferíveis para e entre uma equipe de desenvolvimento.

c) simplicidade é essencial.

d) mudança nos requisitos devem ser evitadas.

e) entregas de software funcionando devem ser realizadas frequentemente.

Item. 18. (FCM / IF-RS -2016) As metodologias ágeis tornaram-se populares em 2001 quando um
grupo
de especialistas em processos de desenvolvimento de software decidiu se reunir nos
Estados
Unidos. O objetivo foi discutir maneiras de melhorar o desempenho de seus projetos.
Embora
tivessem preferências e métodos distintos entre si, concordaram que um pequeno conjunto
de
princípios sempre parecia ter sido respeitado quando os projetos davam certo. Foi então
criada
a Aliança Ágil e o estabelecimento do Manifesto Ágil, contendo os conceitos e os
princípios
comuns compartilhados portodos esses métodos.

NÃO é considerado um princípio por trás do Manifesto Ágil:


a) Responder a mudanças mais que seguir um plano.

b) Colaboração com o cliente mais que negociação de contratos.

c) Processos e ferramentas mais que indivíduos e interação entre eles.

d) Software em funcionamento mais que documentação abrangente.

e) Indivíduos e interação entre eles mais que processos e ferramentas.

ig.(FUNCAB / MJ-SP - 2015) O manifesto ágil considera que a medida primária de progresso é:

a) tempo utilizado.

b) quantidadede testes.

c) quantidadede documentação.

d) custo realizado.

e) software funcionando.

Item. 20. (UECE-CEV / FUNCEME - 2018) O Manifesto para o desenvolvimento ágil de software
resume
os itens mais valorizados pelos praticantes desta abordagem. Considerando os itens
listados a
seguir, assinale a opção que NÃO representa um valor ágil segundo o Manifesto.

a) indivíduos e interações mais que processos e ferramentas

b) seguir um plano mais que responder a mudanças

c) software em funcionamento mais que documentação abrangente

d) colaboração com o cliente mais que negociação de contratos

Item. 21. (ESAF / MF - 2013) O desenvolvimento ágil de software fundamenta-se no
Manifesto Ágil.
Segundo ele deve-se valorizar:

a) mudança de respostas em vez do seguimento de um plano.

b) indivíduos e interações em vez de processos e ferramentas.

c) documentação extensiva operacional em vez de software funcional.

d) indivíduos e intenções junto a processos e ferramentas.

e) seguimento de um plano em vez de resposta a mudança.

Item. 22. (IF-PE / IF-PE - 2016) Sobre o documento conhecido como "manifesto ágil", é
CORRETO dizer
que:

a) prega uma extensa lista de documentos, processos, atores, métodos e diagramas
visando
fornecer alta agilidade.

b) lista e cataloga a maioria dos métodos vigentes à época de sua criação,
classificando cada um
como "ágil" ou "burocrático".

c) foi criado como base para descrever as principais ideias e práticas que eram
comuns a muitos
dos métodos considerados ágeis e que já existiam na época.


d) foi criado com base na ideia de que se tudo for muito bem controlado e
documentado, os
processos serão naturalmente ágeis.

e) a partir dele, foram definidos o XP, o scrum, o crystal, o CMM e o RUP, cada
um com suas
características particulares.

Item. 23. (CS-UFG / UFG - 2018) Ao se empregar métodos ágeis em desenvolvimento de
software, as
atividades:

a) são planejadas com antecedência, e seu progresso é medido em relação
ao plano
estabelecido.

b) são realizadas com base na abordagem iterativa/incremental de desenvolvimento.

c) são planejadas com base no modelo cascata, com fases separadas e distintas de
especificação
e desenvolvimento.

d) são realizadas em fases sequenciais, sendo que cada fase precisa estar completa antes
que se
passe para a próxima.

Item. 24. (CESGRANRIO / Banco da Amazônia - 2018) O Manifesto Ágil se tornou um
marco da
Engenharia de Software, chamando a atenção de que vários processos propostos
de forma
independente tinham valores em comum. Além disso, foram definidos 12 princípios. Entre
eles,
figura o seguinte princípio:

a) cada pessoa em um projeto deve ter sua função predeterminada para
acelerar o
desenvolvimento em conjunto.

b) a contínua atenção à simplicidade do trabalho feito aumenta a agilidade.

c) software funcionando é a medida primária de progresso.

d) os indivíduos, clientes e desenvolvedores, são mais importantes que processos e ferramentas.

e) o software funcional emerge de times auto-organizáveis.

Item. 25. (IADES / ARCON-PA - 2018) Embora esses métodos ágeis sejam todos baseados na
noção de
desenvolvimento e entrega incremental, eles propõem diferentes processos para
alcançar tal
objetivo. No entanto, compartilham um conjunto de princípios, com base no manifesto
ágil, e
por isso têm muito em comum.

SOMMERVILLE, I. Engenharia de software. 9. ed. São Paulo: Person Education, 2011.

Os cinco princípios citados no texto são:

a) envolvimento do cliente; entregas agendadas; pessoas e processos são
igualmente
importantes; aceitar mudanças; e manter a simplicidade.


b) envolvimento do cliente; entrega incremental; pessoas, não processos; aceitaras
mudanças;
e manter a simplicidade.

c) envolvimento do cliente apenas no início; entrega incremental; prazos
rígidos; evitar
mudanças; e manter a equipe.

d) programadores em primeiro lugar; ausência de prazos; cliente como última
prioridade;
aceitar as mudanças; e investir em controle de versão.

e) programadores em primeiro lugar; entrega por protótipos; processos, não pessoas;
aceitar as
mudanças; e manter o cronograma.

26.(FAURGS / TJ-RS - 2018) Considere as seguintes afirmações sobre princípios dos métodos
ágeis.

I - Os clientes devem estartotalmente envolvidos no processo de desenvolvimento. Seu
papel é
fornecer e priorizar novos requisitos do sistema e avaliar suas iterações.

II - Embora as habilidades da equipe devam ser reconhecidas e exploradas, seus membros
não
devem desenvolver maneiras próprias de trabalhar, podendo o processo ser prescritivo.

III- Deve-se ter em mente que os requisitos do sistema irão mudar, por isso, o
sistema deve ser

projetado de maneira a acomodar essas mudanças.

Quais estão corretas?

a) Apenas I.

b) Apenas I e II.

c) Apenas I e III.

d) Apenas II e III.

e) I, lie III.


GABARITo

Item. 1. LETRA C

Item. 2. LETRA A

Item. 3. LETRA B

Item. 4. LETRA B

Item. 5. LETRA E

Item. 6. LETRA E

Item. 7. LETRA B

Item. 8. LETRA E

Item. 9. LETRA C

Item. 10. LETRA B

Item. 11. LETRA A

Item. 12. LETRA C

Item. 13. LETRA B

Item. 14. LETRA A

Item. 15. LETRA C

Item. 16. LETRA D

Item. 17. LETRA D

Item. 18. LETRA C

Item. 19. LETRA E

Item. 20. LETRA B

Item. 21. LETRA B

Item. 22. LETRA C

Item. 23. LETRA B

Item. 24. LETRA C

Item. 25. LETRA B

Item. 26. LETRA C


Conceitos Básicos

KANBAN

NCIDÊNCIA EM PROVA: MÉDIA

Seus lindos, vamos para outro assunto! O que é esse tal de Kanban? Kanban significa cartão ou placa
visual, em japonês. Trata-se de um método para gestão de mudanças com foco na
visualização
do trabalho em progresso (também chamado de Work In Progress -
WIP), identificando
oportunidades de melhorias, tornando explícitas as políticas seguidas e os problemas
encontrados
e, porfim, favorecendo uma cultura de melhoria evolutiva.

Antes de continuar, eu tenho que fazer uma pequena pausa! Há uma certa polêmica sobre
se o
Kanban é uma metodologia de desenvolvimento de software ou não! David J.
Anderson -
pioneiro do Kanban - acha que não é (conforme podemos ver nas declarações
apresentadas
abaixo)! No entanto, é bastante comum ver algumas bancas o tratando como uma
metodologia de
desenvolvimento de software.

"Kanban is not a software development life cycle or project management methodology! It
is
not a way ofmaking software or running projects that make software!"- David J. Anderson

"There is no kanban process for software development. At least I am not aware ofone. I
have
never published one"-David J. Anderson

"It is actually notpossible to develop with only Kanban. The Kanban Method by
itselfdoes not
contain practices sufficient to do product development"-David J. Anderson

O Kanban pode ser visto como um acelerador para a condução de mudanças ou até mesmo um
método para implantação de mudanças em uma organização. Ele não prescreve papéis,
práticas
ou cerimônias específicas (como faz, por exemplo, Scrum). Em vez disso, ele oferece
uma série de
princípios para otimizar o fluxo e a geração de valor dos sistemas de entrega de
software. Agora o
que ele tem a ver com a sua tradução em japonês?

Galera, ele funciona como uma espécie de cartaz ou placa visual contendo vários
post-its - aquele
papelzinho colorido para colar lembretes. Dessa forma, ele permite uma melhor
visualização do
fluxo de trabalho, favorecendo a transparência para todos os envolvidos. Além
disso, ele
permite mudar prioridades facilmente e entregar funcionalidades a qualquer
momento. Não há
preocupação com estimativas nem em ser iterativo.

Como pode ser visto a partir da imagem apresentada a seguir, todo fluxo de trabalho
se torna
visível no Kanban. Os limites do Work in Progress são estabelecidos - o fluxo é
contínuo sem
requerer estimativas. A equipe assume a responsabilidade sobre o processo e se auto-organiza para


otimizá-lo e para ajudar a resolver seus eventuais problemas. O Kanban é construído
sobre os
conceitos de mudança evolucionária.

Dessa forma, uma possível abordagem é começar a entender como funciona
atualmente seu
sistema de desenvolvimento de software. Quando conseguir visualizar, medir e gerenciar o
fluxo
utilizado, melhore-o um passo por vez, aliviando seu maior gargalo, isto é, o processo
evoluirá aos
poucos. Isso é muito diferente do que ocorre, por exemplo, no Scrum - em que se
inicia
definindo papéis, processos e artefatos.

Isso faz do Kanban um método ideal para utilização em conjunto com outros processos -
do
Scrum ao Cascata. Ele também é excelente quando estruturas organizacionais inibem
mudanças
radicais, sendo construído principalmente sob o conceito de melhoria contínua. Ele
somente utiliza
mudanças radicais em situações especiais, nas quais mudanças estruturais são
necessárias ou
quando sérias mudanças de desempenho precisam serfeitas.

O modelo é uma boa opção tanto para desenvolvimento de software quanto para
operação e
manutenção. Kanban e Scrum não são opostos! Nada impede que se comece a usar o Scrum e
se
utilize o Kanban para impulsionar mudanças futuras. Os projetos - apesar de não
insistirem no
compromisso com iterações planejadas - são muito bem controlados, com
cadência fixa,
visualização permanente, medição do tempo de ciclo, fluxo de tarefas e ciclos de feedback curtos.

Galera, existem diversas diferenças entre ambos: Scrum requer iterações e o Kanban, não
-
mas sugere-se que haja uma cadência de entradas e entregas. Quando o Kanban incorpora
iterações, ele é tipicamente chamado Scrumban (para diferenciá-lo do Scrum original), uma vez


que Scrum não gerencia explicitamente o trabalho em progresso e o Kanban não utiliza
iterações
por padrão. Bacana? Vamos ver agora os princípios ou restrições:


- Comece com o que você tem hoje;

PRINCÍPIOS OU RESTRIÇÕES DO KANBAN

- Estimule a liderança em todos os níveis da organização;

- Visualize cada passo em sua cadeia de valor, do conceito geral até o software que se possa
lançar;

- Limite o Trabalho em Progresso (WIP), restringindo o total de trabalho permitido para cada
estágio;

-Torne explícitas as políticas sendo seguidas;

- Meça e gerencie o fluxo, para podertomardecisões bem embasadas, além de visualizaras
consequências;

- Identifique oportunidades de melhorias, na qual a melhoria contínua é responsabilidade de todos.

PRÁTICAS DO KANBAN

- Implemente mecanismos de feedback;

- Gerencie e meça o fluxo de trabalho;

-Visualize o processo;

- Limite o WIP (Work In Progress);

-Torne as políticas dos processos explícitas;

- Melhore colaborativamente e com métodos científicos.

Vamos detalhar o WIP! Trata-se de tarefas que estão em execução em
determinado ponto do
processo. Por que devemos limitar o WIP? Porque quanto maior o número de
tarefas em
andamento em determinado ponto do processo, mais tempo a tarefa permanecerá no fluxo.
Então ele deve ser pequeno? Não, ele não deve ser muito pequeno nem muito grande. Em
geral, se
for muito pequeno, qualquer limitação pode parar o processo de desenvolvimento.


E se for muito grande? Nesse caso, muitas tarefas simultâneas levam a grandes perdas
e confusões.
Então, qual é o tamanho ideal? Bem, isso não existe! Não há um número mágico - é
necessário
descobrir o tamanho empiricamente de acordo com o contexto da organização. Ahhh... se
você
utiliza o Trello, ele é uma forma de apresentar o trabalho sendo realizado, mas
também existem
outras ferramentas (KanbanFlow, Kanbanery, Leankit, Visual WIP, etc).


QUESTõES CoMENTADAS - DIVERSAS BANCAS

í. (CESPE / BANRISUL - 2022) O método Kanban pode ser utilizado em
substituição à
metodologia Scrum, mas também ambos podem ser combinados para o alcance de resultados
mais eficazes.

Comentários:

Opa! O Kanban não pode ser utilizado como um substituto para o Scrum, mas os dois
podem ser
combinados para resultados mais eficazes.

Gabarito: Errado

Item. 2. (CESPE/ BANRISUL-2022) As equipes que utilizam o método Kanban não utilizam timeboxes,
embora a maioria das equipes pratique uma cadência fixa de planejamento, revisão e entregas.

Comentários:

O método Kanban não é estruturado em torno de timeboxes, pois é mais flexível. No
Kanban, o
processo de desenvolvimento de software é dividido em etapas, que podem ser
executadas de
forma contínua e contínua. Isso significa que, em vez de criar um calendário de
entrega e seguir um
cronograma, as equipes Kanban se concentram em entregar trabalho de forma
constante e
incremental. Como resultado, as equipes podem responder mais rapidamente às
mudanças no
projeto, pois não estão limitadas por um cronograma pré-definido.

Gabarito: Correto

Item. 3. (CESPE/ BANRISUL-2022) O Kanban, devido à adoção dos princípios Lean, é um método
ideal
para utilização em projetos que adotam o Scrum; por outro lado, não se
aplica a projetos
tradicionais do tipo cascata.

Comentários:

Ele pode, sim, ser aplicado a projetos tradicionais do tipo cascata. O Kanban não é
exclusivo para
metodologias ágeis, sendo possível aplicá-lo em outros tipos de projetos. O objetivo do
Kanban é
ajudar os times a planejar, monitorar e gerenciar o trabalho, o que o torna uma
ferramenta útil em
qualquer tipo de projeto.

Gabarito: Correto

Item. 4. (CESPE / BANRISUL - 2022) O WIP descreve o total de trabalho que está em
progresso no
Kanban, podendo incluirtodos os itens ou apenas aqueles selecionados para implementação.


Comentários:

O WIP (Work in Progress) descreve o total de trabalho que está em progresso no
Kanban. Esta
informação é usada para ajudar a equipe a tomar decisões informadas sobre quanto
trabalho ela
pode realizar ao mesmo tempo. O WIP pode incluirtodos os itens que estão no Kanban,
ou apenas
aqueles itens selecionados para implementação. Isso depende da abordagem de gerenciamento
de
projeto adotada pela equipe.

Gabarito: Correto

Item. 5. (CESPE / BANRISUL - 2022) O Kanban é um método de gestão de mudanças que dá
ênfase à
visualização do trabalho em andamento.

Comentários:

Definição simples e precisa de Kanban! Nada a acrescentar...

Gabarito: Correto

Item. 6. (CESPE / BNB - 2022) Diferentemente do Scrum, o Kanban não prescreve interações
com
metas pré-definidas e de mesmo tamanho para a execução de atividades, como, por
exemplo,
as de planejamento, de desenvolvimento e de liberação.

Comentários:

Perfeito! O Kanban é uma metodologia de gerenciamento de projetos semelhante ao Scrum,
mas
com algumas diferenças significativas. Ele é focado na visualização do fluxo
de trabalho, na
limitação dotrabalho em progresso e na otimização contínua. Em contraste com o Scrum,
o Kanban
não determina a duração de cada ciclo de trabalho. Em vez disso, os projetos são
divididos em
pequenas unidades de trabalho e as tarefas são desenvolvidas de forma iterativa sem
metas pré-
definidas. O processo de desenvolvimento é então ajustado de acordo com as necessidades
da
equipe.

Gabarito: Correto

Item. 7. (FGV / BANESTES - 2021) Observe o quadro comparativo a seguir, publicado em sites
ligados
ao estudo e à investigação de diferentes estratégias/metodologias para
implementar um
sistema ágil de desenvolvimento ou gestão de projetos.


Aspectos X Y

Ritmo Sprints Fluxo contínuo


Funções

Funções bem
definidas

Sem funções
necessárias

Entregas Final de cada sprint Entrega contínua

Mudanças Evitar durante sprint A qualquer momento

É correto identificar que X e Y representam, respectivamente:

a) Crystal e Scrum;

b) Extreme Programming e Crystal;

c) Kanban e Lean;

d) Lean e Extreme Programming;

e) Scrum e Kanban.

Comentários:

Usando apenas o primeiro critério, já é possível responder à questão: Sprint é típico
do Scrum e
Fluxo Contínuo é típico do Kanban.

Gabarito: Letra E

Item. 8. (CESPE/ TCU - 2015) O método para a implantação de mudanças denominado Kanban não
prevê papéis nem cerimônias específicas.

Comentários:

Realmente não se prevê papéis ou cerimônias no Kanban.

Gabarito: Correto

Item. 9. (CESPE / PROCEMPA - 2014) Kanban considera a utilização de uma sinalização ou
registro
visual para gerenciaro limite de atividades em andamento, indicando se um novo trabalho
pode
ou não ser iniciado e se o limite acordado para cada fase está sendo respeitado.

Comentários:

Esse registro visual é o famoso WIP.

Gabarito: Correto

io.(FGV/ TJ-GO - 2014) Scrum e Kanban são metodologias de gerenciamento de
projetos de
software populares entre praticantes do desenvolvimento ágil. Um aspecto de divergência
entre
as duas metodologias é:


a) processo incremental;

b) processo iterativo;

c) uso de quadro de tarefas;

d) apresentação do estágio de desenvolvimento de uma tarefa;

e) valorização de feedback.

Comentários:

O Kanban não é necessariamente iterativo como é o Scrum! Na prática, esse assunto é
rodeado de
polêmicas e divergências. Já os outros itens tratam de convergências!

Gabarito: Letra B

n.(FGV/ MPE-MS - 2013) Kanban é um dos métodos ágeis mais recentes e
sofreu grande
influência do movimento "Lean", surgido nos anos 1980. São práticas comuns a esse método:

a) limitar o WIP (Work In Progress) e uma visualização explícita do fluxo de trabalho.

b) integração Contínua e gerenciamento de configuração.

c) limitar o WIP (Work In Progress) e gerenciamento de configuração.

d) gerenciar o fluxo de trabalho e manter estimativas previamente definidas.

e) melhoria contínua e nunca limitar o WIP para evitarfolgas no sistema de trabalho.

Comentários:

As práticas são: implemente mecanismos de feedback; gerencie e meça o fluxo
de trabalho;
visualize o processo; limite o WIP (Work In Progress); torne as políticas dos
processos explícitas;
melhore colaborativamente e com métodos científicos.

Gabarito: Letra A

i2.(CESPE / SEDF-2017) A técnica de Kanban é uma forma simples de visualizar o
andamento das
tarefas da equipe durante uma Sprint de Scrum. Nessa técnica, as tarefas são
representadas por
meio de pequenos papéis que indicam o que está pendente, em desenvolvimento e
finalizado.
Com isso, todos visualizam os gargalos e a equipe se organiza melhor, principalmente
quando o
projeto envolve ciclos longos de desenvolvimento.

Comentários:

Ela realmente pode ser considerada uma técnica que ajuda a visualizar o andamento do
projeto -
ele é muito utilizado em conjunto com o Scrum.

Gabarito: Correto


i3-(FCC /TST- 2017) Um Analista de Sistemas do Tribunal Superior do Trabalho - TST,
de modo
hipotético, necessitou aplicar princípios ágeis e de controle usando elementos de três
modelos,
em processos de manutenção de software. Considere:

I. Dividir o cronograma em iterações time-box ou ciclos (sprints).

II. Orientar o trabalho a eventos ao invés de limite de tempo.

III. Aplicar a programação em pares, integração contínua, orientação a testes (TDD),
revisão de
código e todas as demais prescrições antes da implantação.

As características acima correspondem, respectivamente, a:

a) Kanban, XP e Scrum.

b) Kanban, Scrum e XP.

c) XP, Scrum e Kanban.

d) Scrum, XP e Kanban.

e) Scrum, Kanban e XP.

Comentários:

(I) Quem divide o cronograma em iterações time-box é o Scrum; (II) Quem orienta o
trabalho a
eventos ao invés de limite de tempo é o Kanban; (III) Quem aplica a programação em
pares, TDD e
revisão de código é o XP.

Gabarito: Letra E

i4.(CESPE / STM - 2018) A implementação de um Kanban pressupõe a definição de um
fluxo de
trabalho pela equipe, o qual poderá ser revisto, mediante a inclusão ou a retirada de
estágios, à
medida que o trabalho evoluir.

Comentários:

Ele realmente pressupõe um fluxo de trabalho e não há nenhum problema em revisitá-lo
com a
inclusão ou exclusão de estágios com a evolução do trabalho.

Gabarito: Correto

i5.(FCC/ MPE-PE - 2018) Enquanto o processo de desenvolvimento Scrum usa
sprints formais
(ciclos de trabalho) com funções específicas atribuídas, o Kanban:

a) não define sprints formais nem papéis específicos para os integrantes da equipe do
projeto.


b) não define ciclos formais, porém, prescreve papéis específicos para todos os
integrantes da
equipe do projeto.

c) define ciclos formais (sprints), porém, não define papéis específicos para os
integrantes da
equipe do projeto.

d) define ciclos formais de até 4 semanas e papéis específicos para os integrantes da
equipe de
desenvolvimento.

e) define apenas os papéis de Gerente de Projeto e Líder de Equipe, tendo o
desenvolvimento
pautado por ciclos de duas semanas chamados slices.

Comentários:

(a) Correto, ele não define iterações (muito menos sprints)-ou papeis específicos; (b)
Errado, ele
não prescreve papeis para os integrantes da equipe; (c) Errado, ele não define ciclos
formais ou
sprints; (d) Errado, ele não define ciclos formais; (e) Errado, ele não define nenhum papel.

Gabarito: Letra A

i6.(IF-RS/ IF-RS - 2018) Kanban foi criado pela Toyota com o objetivo de
controlar melhor os
níveis enormes de estoque em relação ao consumo real de materiais. Devido à sua
eficiência,
muitas empresas adotaram esse sistema para controlar tarefas das equipes do
setor de
Tecnologia da Informação. A respeito do Kanban, conforme visto em Dooley (2017),
classifique
cada uma das afirmativas abaixo como verdadeira (V) ou falsa (F) e assinale a
alternativa que
apresenta a sequência CORRETA, de cima para baixo:

() Através do quadro Kanban, compartilhado por todos, torna-se possível visualizar as
tarefas
com que cada membro da equipe está envolvido.

() Diferente do Scrum, Kanban baseia-se em iterações de tempo fixo. Os projetos são
divididos
em ciclos semanais denominados Sprints.

() Usa três ideias para influenciar um processo de desenvolvimento: trabalho em
andamento
(WIP), fluxo de trabalho e o custo médio financeiro.

() Geralmente utilizam-se post-its ou cartões de índice para representar uma tarefa no
quadro
Kanban.

a) V-V-F-V

b) V-F-F-V

c) F-F-V-F

d) V-V-V-V


e) F-F-V-V

Comentários:

(V) Correto, o WIP é compartilhado com todos para dar transparência; (F) Errado, ele
não possui
iterações nem ciclos formais ou sprints; (F) Errado, não existe a ideia de custo
médio financeiro; (V)
Correto, são realmente utilizados os post-its para representar tarefas.

Gabarito: Letra B

i7.(CESPE/ SERPRO - 2013) Kanban é um método de desenvolvimento de software
que tem
como uma de suas práticas o gerenciamento do fluxo de trabalho, que deve ser
monitorado,
medido e reportado a cada estado do fluxo.

Comentários:

Ele pode ser considerado um método de desenvolvimento de software e o fluxo de
trabalho é
constantemente monitorado a cada mudança, por meio de um quadro de fluxo.

Gabarito: Correto


LISTA DE QUESTõES - DIVERSAS BANCAS

í. (CESPE / BANRISUL - 2022) O método Kanban pode ser utilizado em
substituição à
metodologia Scrum, mas também ambos podem ser combinados para o alcance de resultados
mais eficazes.

Item. 2. (CESPE / BANRISUL-2022) As equipes que utilizam o método Kanban não utilizam
timeboxes,
embora a maioria das equipes pratique uma cadência fixa de planejamento, revisão e entregas.

Item. 3. (CESPE / BANRISUL-2022) O Kanban, devido à adoção dos princípios Lean, é um
método ideal
para utilização em projetos que adotam o Scrum; por outro lado, não se
aplica a projetos
tradicionais do tipo cascata.

Item. 4. (CESPE / BANRISUL - 2022) O WIP descreve o total de trabalho que está em
progresso no
Kanban, podendo incluirtodos os itens ou apenas aqueles selecionados para implementação.

Item. 5. (CESPE / BANRISUL - 2022) O Kanban é um método de gestão de mudanças que dá
ênfase à
visualização do trabalho em andamento.

Item. 6. (CESPE / BNB - 2022) Diferentemente do Scrum, o Kanban não prescreve interações
com
metas pré-definidas e de mesmo tamanho para a execução de atividades, como, por
exemplo,
as de planejamento, de desenvolvimento e de liberação.

Item. 7. (FGV / BANESTES - 2021) Observe o quadro comparativo a seguir, publicado em
sites ligados
ao estudo e à investigação de diferentes estratégias/metodologias para
implementar um
sistema ágil de desenvolvimento ou gestão de projetos.

Aspectos X Y

Ritmo Sprints Fluxo contínuo


Funções

Funções bem
definidas

Sem funções
necessárias

Entregas Final de cada sprint Entrega contínua

Mudanças Evitar durante sprint A qualquer momento

É correto identificar que X e Y representam, respectivamente:

a) Crystal e Scrum;

b) Extreme Programming e Crystal;

c) Kanban e Lean;

d) Lean e Extreme Programming;

e) Scrum e Kanban.

Item. 8. (CESPE / TCU - 2015) O método para a implantação de mudanças denominado Kanban
não
prevê papéis nem cerimônias específicas.


g. (CESPE/ PROCEMPA - 2014) Kanban considera a utilização de uma sinalização ou
registro
visual para gerenciaro limite de atividades em andamento, indicando se um novo trabalho
pode
ou não ser iniciado e se o limite acordado para cada fase está sendo respeitado.

io.(FGV/ TJ-GO - 2014) Scrum e Kanban são metodologias de gerenciamento de
projetos de
software populares entre praticantes do desenvolvimento ágil. Um aspecto de divergência
entre
as duas metodologias é:

a) processo incremental;

b) processo iterativo;

c) uso de quadro de tarefas;

d) apresentação do estágio de desenvolvimento de uma tarefa;

e) valorização de feedback.

n.(FGV/ MPE-MS - 2013) Kanban é um dos métodos ágeis mais recentes e
sofreu grande
influência do movimento "Lean", surgido nos anos 1980. São práticas comuns a esse método:

a) limitar o WIP (Work In Progress) e uma visualização explícita do fluxo de trabalho.

b) integração Contínua e gerenciamento de configuração.

c) limitar o WIP (Work In Progress) e gerenciamento de configuração.

d) gerenciar o fluxo de trabalho e manter estimativas previamente definidas.

e) melhoria contínua e nunca limitar o WIP para evitarfolgas no sistema de trabalho.

Item. 12. (CESPE / SEDF-2017) A técnica de Kanban é uma forma simples de visualizar o
andamento das
tarefas da equipe durante uma Sprint de Scrum. Nessa técnica, as tarefas são
representadas por
meio de pequenos papéis que indicam o que está pendente, em desenvolvimento e
finalizado.
Com isso, todos visualizam os gargalos e a equipe se organiza melhor, principalmente
quando o
projeto envolve ciclos longos de desenvolvimento.

i3-(FCC / TST - 2017) Um Analista de Sistemas do Tribunal Superior do Trabalho -
TST, de modo
hipotético, necessitou aplicar princípios ágeis e de controle usando elementos de três
modelos,
em processos de manutenção de software. Considere:

I. Dividir o cronograma em iterações time-box ou ciclos (sprints).

II. Orientar o trabalho a eventos ao invés de limite de tempo.

III. Aplicar a programação em pares, integração contínua, orientação a testes (TDD),
revisão de
código e todas as demais prescrições antes da implantação.

As características acima correspondem, respectivamente, a:

a) Kanban, XP e Scrum.

b) Kanban, Scrum e XP.

c) XP, Scrum e Kanban.


d) Scrum, XP e Kanban.

e) Scrum, Kanban e XP.

Item. 14. (CESPE / STM - 2018) A implementação de um Kanban pressupõe a definição de um
fluxo de
trabalho pela equipe, o qual poderá ser revisto, mediante a inclusão ou a retirada de
estágios, à
medida que o trabalho evoluir.

Item. 15. (FCC/ MPE-PE - 2018) Enquanto o processo de desenvolvimento Scrum usa sprints
formais
(ciclos de trabalho) com funções específicas atribuídas, o Kanban:

a) não define sprints formais nem papéis específicos para os integrantes da equipe do projeto.

b) não define ciclos formais, porém, prescreve papéis específicos para todos os
integrantes da
equipe do projeto.

c) define ciclos formais (sprints), porém, não define papéis específicos para os
integrantes da
equipe do projeto.

d) define ciclos formais de até 4 semanas e papéis específicos para os integrantes da
equipe de
desenvolvimento.

e) define apenas os papéis de Gerente de Projeto e Líder de Equipe, tendo o
desenvolvimento
pautado por ciclos de duas semanas chamados slices.

Item. 16. (IF-RS/ IF-RS - 2018) Kanban foi criado pela Toyota com o objetivo de controlar
melhor os
níveis enormes de estoque em relação ao consumo real de materiais. Devido à sua
eficiência,
muitas empresas adotaram esse sistema para controlar tarefas das equipes do
setor de
Tecnologia da Informação. A respeito do Kanban, conforme visto em Dooley (2017),
classifique
cada uma das afirmativas abaixo como verdadeira (V) ou falsa (F) e assinale a
alternativa que
apresenta a sequência CORRETA, de cima para baixo:

() Através do quadro Kanban, compartilhado por todos, torna-se possível visualizar as
tarefas
com que cada membro da equipe está envolvido.

() Diferente do Scrum, Kanban baseia-se em iterações de tempo fixo. Os projetos são
divididos
em ciclos semanais denominados Sprints.

() Usa três ideias para influenciar um processo de desenvolvimento: trabalho em
andamento
(WIP), fluxo de trabalho e o custo médio financeiro.

() Geralmente utilizam-se post-its ou cartões de índice para representar uma tarefa no
quadro
Kanban.

a) V-V-F-V


b) V-F-F-V

c) F-F-V-F

d) V-V-V-V

e) F-F-V-V

i7.(CESPE/ SERPRO - 2013) Kanban é um método de desenvolvimento de software
que tem
como uma de suas práticas o gerenciamento do fluxo de trabalho, que deve ser
monitorado,
medido e reportado a cada estado do fluxo.


GABARITo - DIVERSAS BANCAS

Item. 1. ERRADO

Item. 2. CORRETO

Item. 3. CORRETO

Item. 4. CORRETO

Item. 5. CORRETO

Item. 6. CORRETO

Item. 7. LETRA E

Item. 8. CORRETO

Item. 9. CORRETO

Item. 10. LETRA B

Item. 11. LETRA A

Item. 12. CORRETO

Item. 13. LETRA E

Item. 14. CORRETO

Item. 15. LETRA A

Item. 16. LETRA B

Item. 17. CORRETO


MINIMUM VIABLE PRoDUCT (MVP)

Conceitos Básicos

INCIDÊNCIA EM PROVA: BAIXA

Meus queridos alunos, vocês concordam comigo que é natural que patrocinadores de
projetos
queiram lançar um produto totalmente completo para seus clientes. É o que os clientes
esperam,
não é? Esta é a pergunta errada a serfeita! A pergunta certa seria: qual é o mínimo que meus
clientes
mais valiosos precisam primeiro? Pessoal, raramente eles precisarão de tudo!
Exemplo: nesse
momento, eu estou escrevendo essa aula no Microsoft Word 2019.

Em 2006, a equipe de experiência de usuário do Microsoft Office publicou
resultados de uma
pesquisa que descobriu que apenas cinco comandos representavam 32% de todo o uso do
Microsoft
Word (Copiar, Salvar, Colar, Desfazer e Negritar). Dá para acreditar nisso? Esse
software tem uma
infinidade absurda de comandos, mas 1/3 do uso dos clientes trata apenas de cinco
comandos
bastante simples.

O Minimum Viable Product (MVP) é um conceito (inicialmente cunhado e definido
por Frank
Robinson no contexto de desenvolvimento de software) que ajuda a identificar
e alcançar a
atividade mínima viável que inicialmente pode provar e, posteriormente, entregar
os benefícios
necessários para alcançar uma solução viável. Difícil de entender? Basicamente, MVP não
é uma
versão mais barata ou diluída do produto final.

Trata-se de uma representação dele - no todo ou em parte - que oferece valor ou
representa a
atividade tangível ou solução de alguma forma. Um grande autorchamado Eric Ries o
define como
a versão de um novo produto que permite que uma equipe colete o máximo de aprendizado
sobre os clientes com a menor quantidade de esforço. O objetivo dessa abordagem é
construir
rapidamente um software que apresente seus aspectos mais importantes.

O MVP poderá ajudá-lo a obter um feedback inicial e, em seguida, corrigir -
conforme a
necessidade-antes de construir um produto mais pesado. Ele pode ser um serviço completo
que
atende a grupos de usuários limitados ou serviços parciais que abordam grupos de
usuários mais
amplos. O feedback dos clientes é extremamente importante, portanto é interessante
lançaro MVP
para usuários reais.

Se você se concentrar no mínimo produto viável, significa que você dará o mínimo nas
mãos
dos clientes e começará a, de fato, aprender com seu comportamento real dos usuários.
Aquele
cara lá de cima chamado Eric Ries conta uma história muito interessante sobre um
não-sucesso. Ele
conta que trabalhou por cinco anos em uma startup, com uma equipe escolhida à mão e
tudo do
bom e do melhor.


Quando ele se juntou à equipe, eles não lhe disseram o que era o produto, apenas os nomes das
pessoas legais com quem ele trabalharia. A equipe ficava em um hangar aeronaves. O
projeto
era todo secreto: eles estavam construindo um produto chamado Big Idea - o futuro da
Internet.
Eles geraram entusiasmo no Vale do Silício, a imprensa ficava curiosa e
quando o produto
finalmente foi lançado, houve linhas em linhas em jornais e revistas.

No entanto, o que produto não obteve foi o cliente. Cinco anos para construir o Big
Idea com todos
os recursos, industrialmente fortalecidos e depois simplesmente falhar. Não há
muita sabedoria
nisso tudo, vocês concordam comigo? Esta é uma lição repetida de novo e de novo e
de novo. As
organizações continuam envolvendo o desenvolvimento de seus produtos em segredo, esperando
até que eles tenham o conjunto completo de recursos antes de bater no mercado.

Galera, um projeto ágil é conduzido através de entregas rápidas e frequentes. Um
projeto bem
executado coloca ênfase em entregas de valor de acordo com objetivos de negócios e os
usuários
de destaque. O MVP - versão mais simples de um produto que pode ser disponibilizada
para o
negócio - promove essa liberação incremental de software. É diferente de produtos
criados da
forma tradicional, tipicamente com um período longo de criação de protótipo, análise e elaboração.

Como já vimos, ele foca no produto mínimo, validação de pedaços menores -
bem menos
elaborados do que uma versão final -, mas viável para verificar se o direcionamento está correto.

LEAN INCEPTION

Com base no entendimento comum dos objetivos do negócio e dos usuários de destaque,
busca-se
o esclarecimento dos pedaços menores que compõem o produto. Por fim, vamos falar
rapidamente
um pouquinho sobre o Lean Inception! O que diabos é isso, Diego? Galera, não existe
ninguém
melhor para explicar esse conceito do que o próprio criador dele. E adivinhem só: ele
é brasileiro e
se chama Paulo Caroli:

Projetos ágeis enfatizam a entrego precoce e contínua de software valioso, cujo valor vem dos
objetivos de negócios
e das necessidades dos clientes. A criação do produto Lean StartUp ajuda nessa direção, promovendo
a liberação
incremental de um MVP (Minimum Viable Product) - uma versão simples de um produto que é dada aos
usuários
para validar as principais premissas do negócio.

Mas como nós resolvemos o que deve estar em MVP e começamos um projeto ágil o mais rapidamente
possível?
Como garantir que a equipe comece a criar o produto com um entendimento compartilhado e um plano
eficaz? Eu
projetei o Lean Inception para respondera essas perguntas.

O ágil simples não tem um trabalho inicial, mas na prática percebemos que temos de fazer um pouco
disso. Para a
ThoughtWorks, Inception é esse "pouco disso". Desde que ingressei na ThoughtWorks, percebi que
todos os projetos


ágeis da empresa começaram de forma semelhante. A equipe do projeto se reuniria por
algumas semanas,
passando por muitas atividades antes de iniciar o trabalho de entrega: isso foi a
Inception. Nossas Inceptions
variam de projeto para projeto, mas elas geralmente geram alinhamento entre o negócio e as pessoas
técnicas, e
criam uma lista ordenada de estórias de usuários com estimativas juntamente com um plano de
lançamento.

Eu fiquei muito satisfeito facilitando essas Inceptions ágeis dessa forma até 2011 - ano em que meu
filho nasceu.
A questão é que eu era ofacilitador da Inception e ela levaria de duas a quatro semanas. E
eu não poderia ficar
longe de casa por mais de uma semana. Eu tive que fazer as Inceptions mais enxutas, de alguma forma
fazê-las
caberem uma semana. Eu estava indofazeraminha primeira viagem após meu filho ter nascido. Em um
longo voo
de São Paulo a São Francisco, li 0 livro Lean StartUp, de Eric Ries. A partir disso, eu encontrei
a desculpa perfeita
para reduzir 0 comprimento do Inception e voltar para casa depois de uma semana.

Por que é chamado de Lean Inception?

Esse novo estilo de inception é definitivamente uma mudança em relação a Inception de
antigamente. A equipe
não mais escreve e estima histórias de usuários. Ao experimentar esse novo estilo, 0 nome
"Inception" deu a todos
a mensagem errada. Eu precisava de um nome diferente. O novo estilo de Inception é Lean (leve) por
duas razões:

- A duração da Inception é menor, removendo tudo 0 que não se relacionava ao produto (como
arquitetura, projeto
etc.), tornando-se Lean;

- O resultado final da Inception é a compreensão do MVP, um conceito fundamental do movimento Lean
StartUp.
Portanto, 0 novo estilo de Inception tinha um nome claro: The Lean Inception.

Por que um Lean Inception?

Uma Lean Inception é útil quando a equipe precisa desenvolver iterativamente um MVP.
Embora 0 termo seja
muitas vezes mal compreendido, a propriedade central de um MVP é que é algo que construímos para
saber se vale
a pena continuar construindo um produto. Portanto, escolhemos recursos baseados em
testar nossas premissas
sobre 0 que é valioso para nossos usuários. Para isso, precisamos entender quem são nossos
usuários, que atividade
eles fazem que 0 produto suporta e como medir se eles acharem 0 produto útil. Achamos que 0
workshop é valioso
em duas circunstâncias principais.

- Grandes projetos acham que uma Lean Inception é valiosa para começar rapidamente e
para ser orientada a
trabalhar em um estilo Lean. Esse começo constrói iterações iniciais projetadas para
descobrir e testar quais
recursos são verdadeiramente valorizados pelos seus usuários.

- Organizações menores (como as Startups) usam Lean Inceptions para pegar uma ideia
que já foi testada por
alguns MVPs pré-software e evoluí-lo em um produto de software.

Esse workshop é especificamente sobre a compreensão de um MVP. Ele não substitui sessões de
ideação, pesquisa
de clientes, revisão de arquitetura ou análise competitiva. É uma técnica específica que faz parte
da compreensão
do que é preciso para construir um produto de sucesso. Como ele se encaixa exatamente
com essas outras
atividades depende muito do contexto específico da sua organização e do esforço de
desenvolvimento que você
está empregando.

(PETROBRÁS - 2019) Do ponto de vista de design e de usabiIidade, o produto mínimo
viável dispensa padrões de qualidade comercial, sendo suficiente que a funcionalidade
parcial proposta tenha um nível básico de confiabilidade.


Comentários: O MVP (Minimum Viable Product) é uma versão simples de um produto que é dada aos
usuários para validar as
principais premissas do negócio. Apesar disso, no MVP os padrões de qualidade não são dispensados,
eles devem sempre existir
(Errado).

(BNB - 2022) MVP (Mínimo Produto Viável) é um protótipo do sistema que é simples o
suficiente para testar as características técnicas de um produto bem como é o conceito
de uma solução utilizável e valiosa para o negócio.

Comentários: MVP (Minimum Viable Product) não é um protótipo! Trata-se de um produto
que possui apenas os principais
recursos necessários para torná-lo funcional e utilizável. Geralmente é a primeira versão de um
produto e é usado para testar o
conceito e obter feedback dos usuários. Um protótipo, por outro lado, é uma versão básica de um
produto ou serviço usado para
testar ideias, processos e experiência do usuário (Errado).


DESENVoLVIMENTo Low/No CoDE

Conceitos Básicos

INCIDÊNCIA EM PROVA: BAIXA

Imagine que você precisa construir uma casa, mas não sabe nada sobre construção. O
jeito
seria contratar um arquiteto para projetar a casa e um construtor para executar o projeto.

No entanto, com o low-code, é como se você pudesse contar com um kit de peças pré-
fabricadas, onde você só precisaria encaixar as peças de acordo com o projeto
pré-definido.
Isso permite que você possa construir uma casa sem precisar aprender todo o processo
de
construção desde o começo.

Já o no-code é ainda mais simples. É como se você comprasse uma casa já pronta, onde
tudo que você precisa fazer é decorar e personalizar o espaço de acordo com as suas
necessidades. Você não precisa saber nada sobre construção, basta escolher o modelo da
casa que mais lhe agrada e personalizá-la conforme seus gostos e necessidades.

Deforma análoga, o low-code e no-code são plataformas de desenvolvimento de software
que permitem a criação de aplicativos com pouco ou nenhum
conhecimento de
programação. Com essas plataformas, é possível criar soluções de software com
mais
rapidez e eficiência, permitindo que até mesmo pessoas sem formação em programação
possam desenvolver seus próprios aplicativos.

Low Code (também chamada de Codeless) e No Code são termos que vêm ganhando cada vez mais
espaço no mundo do desenvolvimento de software. Ambos se referem a abordagens que visam
tornar a criação de aplicativos mais fácil, rápida e acessível para um público mais
amplo,
incluindo usuários finais, analistas de negócios e desenvolvedores com pouco
conhecimento
técnico.

Em termos simples, Low Code refere-se a uma abordagem de desenvolvimento de software
que
se concentra em fornecer uma plataforma ou conjunto de ferramentas que permitem que os
usuários criem aplicativos com o mínimo de programação possível. Isso é alcançado por meio
de
interfaces visuais, assistentes e modelos pré-construídos que podem ser personalizados de
acordo
com as necessidades do usuário.

Já o No Code é uma abordagem que busca permitir que usuários sem conhecimento técnico
possam criar aplicativos por conta própria, sem precisar escrever uma única linha de
código.
Isso é possível por meio de plataformas que oferecem ferramentas de arrastar e soltar,
modelos
pré-construídos e automação de processos, permitindo que usuários finais
construam aplicativos
personalizados para suas necessidades específicas.


Uma das principais vantagens de ambas as abordagens é a redução do tempo de
desenvolvimento
e a facilitação da criação de aplicativos. Com menos tempo gasto em
codificação, os
desenvolvedores podem se concentrar em outros aspectos do processo de desenvolvimento,
como testes, implantação e manutenção.

Outra vantagem é a democratização do desenvolvimento de software. Com plataformas Low
Code e No Code, usuários finais e analistas de negócios podem criar aplicativos
personalizados que
atendam às suas necessidades sem depender de desenvolvedores especializados. Isso
pode
melhorar a eficiência e a produtividade da organização.

No entanto, uma das desvantagens dessas abordagens é a limitação na personalização e
no escopo
do aplicativo criado. Os modelos pré-construídos podem não atender a todas as
necessidades
do usuário e pode haver limitações na integração com outras ferramentas ou sistemas.
Além
disso, a automação de processos pode levar a uma falta de controle sobre o aplicativo
e sua
funcionalidade.

No fim das contas, podemos afirmar que Low Code e No Code são abordagens
de
desenvolvimento de software que buscam democratizar e simplificar o processo de criação
de
aplicativos. Embora ofereçam vantagens significativas, também apresentam limitações em
termos
de personalização e integração. É importante avaliar cuidadosamente as necessidades do
usuário e
as funcionalidades necessárias antes de escolher uma abordagem de desenvolvimento.

As plataformas de desenvolvimento Low Code e No Code são baseadas em
ferramentas de
desenvolvimento visual que visam reduzir o tempo de desenvolvimento e o esforço
necessário
para criar aplicativos. Low Code e No Code são abordagens semelhantes, mas com
diferenças
significativas.

O Low Code é uma abordagem que utiliza uma quantidade reduzida de programação
tradicional,
onde o desenvolvedor ainda precisa escrever algum código, mas a maior parte da lógica
é gerada
automaticamente. Já o No Code, como o próprio nome sugere, não requer que o usuário
escreva
nenhum código, apenas utiliza as ferramentas disponíveis para criar aplicativos.

Existem diversas plataformas Low Code e No Code disponíveis no mercado. Algumas das
mais
populares são: Microsoft Power Apps, Google App Maker, Salesforce Lightning, OutSystems,
Mendix, Bubble, Airtable e Webflow. Cada uma dessas plataformas tem
suas próprias
características e funcionalidades, que podem ser escolhidas com base nas necessidades e
objetivos
do usuário.

Por exemplo, o Microsoft Power Apps é uma plataforma Low Code que oferece um ambiente
de
desenvolvimento visual para criar aplicativos móveis e da web, enquanto o
Bubble é uma
plataforma No Code que permite criar aplicativos complexos sem escrever nenhuma
linha de
código. O OutSystems é uma plataforma Low Code que oferece recursos de
automação de
negócios para acelerar o desenvolvimento de aplicativos corporativos.


Cada plataforma tem suas próprias vantagens e desvantagens, dependendo do
contexto e dos
requisitos de negócios. Algumas das vantagens incluem maior produtividade, redução de
custos e
maior agilidade no desenvolvimento. No entanto, as desvantagens podem incluir limitações
de
personalização, maior dependência da plataforma e menor controle sobre o código fonte.

A integração e extensibilidade são características fundamentais em qualquer
plataforma,
especialmente nas plataformas Low Code e No Code, que visam facilitara criação de
aplicativos por
usuários sem conhecimentos avançados em programação. Porém, é importante que
essas
plataformas possam ser integradas com outras ferramentas e sistemas existentes, a fim de
expandir suas funcionalidades e atender às necessidades específicas de cada projeto.

A integração pode ser realizada de diversas maneiras, dependendo da
plataforma e das
ferramentas envolvidas. Uma opção é utilizar APIs (Application Programming Interfaces),
que
permitem a comunicação entre diferentes sistemas de forma padronizada e segura. Outra
opção é
o uso de webhooks, que permitem que a plataforma envie informações para
outros sistemas
quando ocorrem eventos específicos, como a criação de um novo registro em um banco de dados.

Já a extensibilidade das plataformas permite que os usuários possam adicionar
novas
funcionalidades ou personalizar a plataforma de acordo com suas necessidades. Isso pode
ser
feito por meio de plugins, que são módulos adicionais que se integram à plataforma e
adicionam
novas funcionalidades. Também é possível utilizar linguagens de programação para
criar novos
componentes e integrá-los à plataforma.

Ao integrar e estender plataformas Low Code e No Code, é possível criar soluções mais
complexas e personalizadas, sem a necessidade de investir em desenvolvimento de software
tradicional. Além disso, as plataformas Low Code e No Code oferecem uma maiorfacilidade
de uso
e uma redução significativa no tempo e nos custos de desenvolvimento. Por isso, é
importante que
as empresas e organizações considerem essas plataformas em suas
estratégias de
desenvolvimento de software.

(PGE/RJ - 2022) Uma das vantagens dos conceitos codeless e nocode sobre o
desenvolvimento tradicional é o lançamento mais rápido de protótipos e do MVP
(mínimo produto viável) do sistema.

Comentários: uma das principais vantagens das abordagens codeless e nocode é a rapidez no
desenvolvimento de protótipos
e do MVP (Minimum Viable Product), que é a versão mais simples e funcional do
produto. Essas abordagens oferecem uma
variedade de ferramentas que permitem que os usuários desenvolvam aplicativos rapidamente, sem a
necessidade de escrever
uma grande quantidade de código ou contratar desenvolvedores. Além disso, essas ferramentas
geralmente possuem recursos
pré-construídos, como modelos de interface do usuário e bibliotecas de código, que podem ser usados
para acelerar ainda mais
o processo de desenvolvimento. Com o MVP lançado mais rapidamente, as equipes de desenvolvimento
podem validar a ideia
com os usuários mais cedo, testar a funcionalidade e receber feedback para iterar e melhorar 0
produto de forma mais rápida e
eficiente. Isso pode economizartempo e dinheiro, além de aumentar as chances de sucesso do produto
no mercado (Correto).

(TJ/CE —2022) Considere a lista de aplicações abaixo.


I. Assistentes virtuais e ferramentas de chatbot

II. App de internet banking.

III. Ferramenta RPA para automatizar um processo administrativo de back-office.

IV. App para divulgação de campanha de e-mail marketing.

V. Ferramenta para controle automatizado de carro autônomo.

As aplicações que pertencem a categorias típicas de sistemas Low-code/No-Code são as
que constam APENAS em:

a) 1,11 e V.

b) II, III e IV.

c) III e IV.

d) I, III e IV.

e) I, IV eV.

Comentários: (I) Correto. Assistentes virtuais e ferramentas de chatbots podem ser criados com
plataformas de No-Code, que
permitem a criação de fluxos de conversação sem a necessidade de escrever código; (II) Errado, apps
de internet banking não
são aplicações típicas de desenvolvimento Low/No Code; (III) Correto, ferramentas de RPA
(Robotic Process Automation) -
tecnologia de automação de processos de negócio - são tipicamente implementadas por
meio de desenvolvimento Low/No
Code; (IV) Correto. App para divulgação de campanha de e-mail marketing pode ser criado com
ferramentas de Low-Code, que
possuem recursos pré-construídos para lidar com o envio de e-mails em massa; (V)
Errado. Ferramenta para controle
automatizado de carro autônomo não são típicas de sistemas Low/No Code (Letra D).

(BNB - 2022) Low code foi criado para desenvolver interfaces que funcionassem sem
alfabetização em nenhum idioma e, principalmente, sem alfabetização em inglês.

Comentários: o low code é uma abordagem que visa simplificar o processo de desenvolvimento de
aplicativos, permitindo que
usuários sem habilidades de programação possam criar aplicativos rapidamente usando
ferramentas visuais e recursos pré-
construídos, independentemente do idioma utilizado (Errado).


